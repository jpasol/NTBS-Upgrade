'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class dsAcctRpt
    Inherits DataSet
    
    Private tableINVICT As INVICTDataTable
    
    Private tableINVCYB As INVCYBDataTable
    
    Private tableINVPAYDTL As INVPAYDTLDataTable
    
    Private tableCYRate As CYRateDataTable
    
    Private tableSales As SalesDataTable
    
    Private tableCash As CashDataTable
    
    Private relationINVCYBCYRate As DataRelation
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("INVICT")) Is Nothing) Then
                Me.Tables.Add(New INVICTDataTable(ds.Tables("INVICT")))
            End If
            If (Not (ds.Tables("INVCYB")) Is Nothing) Then
                Me.Tables.Add(New INVCYBDataTable(ds.Tables("INVCYB")))
            End If
            If (Not (ds.Tables("INVPAYDTL")) Is Nothing) Then
                Me.Tables.Add(New INVPAYDTLDataTable(ds.Tables("INVPAYDTL")))
            End If
            If (Not (ds.Tables("CYRate")) Is Nothing) Then
                Me.Tables.Add(New CYRateDataTable(ds.Tables("CYRate")))
            End If
            If (Not (ds.Tables("Sales")) Is Nothing) Then
                Me.Tables.Add(New SalesDataTable(ds.Tables("Sales")))
            End If
            If (Not (ds.Tables("Cash")) Is Nothing) Then
                Me.Tables.Add(New CashDataTable(ds.Tables("Cash")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property INVICT As INVICTDataTable
        Get
            Return Me.tableINVICT
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property INVCYB As INVCYBDataTable
        Get
            Return Me.tableINVCYB
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property INVPAYDTL As INVPAYDTLDataTable
        Get
            Return Me.tableINVPAYDTL
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CYRate As CYRateDataTable
        Get
            Return Me.tableCYRate
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Sales As SalesDataTable
        Get
            Return Me.tableSales
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Cash As CashDataTable
        Get
            Return Me.tableCash
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As dsAcctRpt = CType(MyBase.Clone,dsAcctRpt)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("INVICT")) Is Nothing) Then
            Me.Tables.Add(New INVICTDataTable(ds.Tables("INVICT")))
        End If
        If (Not (ds.Tables("INVCYB")) Is Nothing) Then
            Me.Tables.Add(New INVCYBDataTable(ds.Tables("INVCYB")))
        End If
        If (Not (ds.Tables("INVPAYDTL")) Is Nothing) Then
            Me.Tables.Add(New INVPAYDTLDataTable(ds.Tables("INVPAYDTL")))
        End If
        If (Not (ds.Tables("CYRate")) Is Nothing) Then
            Me.Tables.Add(New CYRateDataTable(ds.Tables("CYRate")))
        End If
        If (Not (ds.Tables("Sales")) Is Nothing) Then
            Me.Tables.Add(New SalesDataTable(ds.Tables("Sales")))
        End If
        If (Not (ds.Tables("Cash")) Is Nothing) Then
            Me.Tables.Add(New CashDataTable(ds.Tables("Cash")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableINVICT = CType(Me.Tables("INVICT"),INVICTDataTable)
        If (Not (Me.tableINVICT) Is Nothing) Then
            Me.tableINVICT.InitVars
        End If
        Me.tableINVCYB = CType(Me.Tables("INVCYB"),INVCYBDataTable)
        If (Not (Me.tableINVCYB) Is Nothing) Then
            Me.tableINVCYB.InitVars
        End If
        Me.tableINVPAYDTL = CType(Me.Tables("INVPAYDTL"),INVPAYDTLDataTable)
        If (Not (Me.tableINVPAYDTL) Is Nothing) Then
            Me.tableINVPAYDTL.InitVars
        End If
        Me.tableCYRate = CType(Me.Tables("CYRate"),CYRateDataTable)
        If (Not (Me.tableCYRate) Is Nothing) Then
            Me.tableCYRate.InitVars
        End If
        Me.tableSales = CType(Me.Tables("Sales"),SalesDataTable)
        If (Not (Me.tableSales) Is Nothing) Then
            Me.tableSales.InitVars
        End If
        Me.tableCash = CType(Me.Tables("Cash"),CashDataTable)
        If (Not (Me.tableCash) Is Nothing) Then
            Me.tableCash.InitVars
        End If
        Me.relationINVCYBCYRate = Me.Relations("INVCYBCYRate")
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "dsAcctRpt"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsAcctRpt.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableINVICT = New INVICTDataTable
        Me.Tables.Add(Me.tableINVICT)
        Me.tableINVCYB = New INVCYBDataTable
        Me.Tables.Add(Me.tableINVCYB)
        Me.tableINVPAYDTL = New INVPAYDTLDataTable
        Me.Tables.Add(Me.tableINVPAYDTL)
        Me.tableCYRate = New CYRateDataTable
        Me.Tables.Add(Me.tableCYRate)
        Me.tableSales = New SalesDataTable
        Me.Tables.Add(Me.tableSales)
        Me.tableCash = New CashDataTable
        Me.Tables.Add(Me.tableCash)
        Dim fkc As ForeignKeyConstraint
        fkc = New ForeignKeyConstraint("INVCYBCYRate", New DataColumn() {Me.tableINVCYB.rtecdeColumn}, New DataColumn() {Me.tableCYRate.cyr_rtecdeColumn})
        Me.tableCYRate.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        Me.relationINVCYBCYRate = New DataRelation("INVCYBCYRate", New DataColumn() {Me.tableINVCYB.rtecdeColumn}, New DataColumn() {Me.tableCYRate.cyr_rtecdeColumn}, false)
        Me.Relations.Add(Me.relationINVCYBCYRate)
    End Sub
    
    Private Function ShouldSerializeINVICT() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeINVCYB() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeINVPAYDTL() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeCYRate() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeSales() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeCash() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub INVICTRowChangeEventHandler(ByVal sender As Object, ByVal e As INVICTRowChangeEvent)
    
    Public Delegate Sub INVCYBRowChangeEventHandler(ByVal sender As Object, ByVal e As INVCYBRowChangeEvent)
    
    Public Delegate Sub INVPAYDTLRowChangeEventHandler(ByVal sender As Object, ByVal e As INVPAYDTLRowChangeEvent)
    
    Public Delegate Sub CYRateRowChangeEventHandler(ByVal sender As Object, ByVal e As CYRateRowChangeEvent)
    
    Public Delegate Sub SalesRowChangeEventHandler(ByVal sender As Object, ByVal e As SalesRowChangeEvent)
    
    Public Delegate Sub CashRowChangeEventHandler(ByVal sender As Object, ByVal e As CashRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class INVICTDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnrefnum As DataColumn
        
        Private columninvnum As DataColumn
        
        Private columncuscde As DataColumn
        
        Private columncusnam As DataColumn
        
        Private columninvdttm As DataColumn
        
        Private columnvslnam As DataColumn
        
        Private columnregnum As DataColumn
        
        Private columninvremark As DataColumn
        
        Private columninvamt As DataColumn
        
        Private columninvvat As DataColumn
        
        Private columninvtax As DataColumn
        
        Private columntotalpay As DataColumn
        
        Private columngtycde As DataColumn
        
        Private columnstatus As DataColumn
        
        Private columnrectag As DataColumn
        
        Private columnuserid As DataColumn
        
        Private columnupdcde As DataColumn
        
        Private columncfscy As DataColumn
        
        Private columneffdte As DataColumn
        
        Private columnnoncnt As DataColumn
        
        Private columnarrival As DataColumn
        
        Private columnvoynum As DataColumn
        
        Private columnContested As DataColumn
        
        Private columnterm As DataColumn
        
        Friend Sub New()
            MyBase.New("INVICT")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property refnumColumn As DataColumn
            Get
                Return Me.columnrefnum
            End Get
        End Property
        
        Friend ReadOnly Property invnumColumn As DataColumn
            Get
                Return Me.columninvnum
            End Get
        End Property
        
        Friend ReadOnly Property cuscdeColumn As DataColumn
            Get
                Return Me.columncuscde
            End Get
        End Property
        
        Friend ReadOnly Property cusnamColumn As DataColumn
            Get
                Return Me.columncusnam
            End Get
        End Property
        
        Friend ReadOnly Property invdttmColumn As DataColumn
            Get
                Return Me.columninvdttm
            End Get
        End Property
        
        Friend ReadOnly Property vslnamColumn As DataColumn
            Get
                Return Me.columnvslnam
            End Get
        End Property
        
        Friend ReadOnly Property regnumColumn As DataColumn
            Get
                Return Me.columnregnum
            End Get
        End Property
        
        Friend ReadOnly Property invremarkColumn As DataColumn
            Get
                Return Me.columninvremark
            End Get
        End Property
        
        Friend ReadOnly Property invamtColumn As DataColumn
            Get
                Return Me.columninvamt
            End Get
        End Property
        
        Friend ReadOnly Property invvatColumn As DataColumn
            Get
                Return Me.columninvvat
            End Get
        End Property
        
        Friend ReadOnly Property invtaxColumn As DataColumn
            Get
                Return Me.columninvtax
            End Get
        End Property
        
        Friend ReadOnly Property totalpayColumn As DataColumn
            Get
                Return Me.columntotalpay
            End Get
        End Property
        
        Friend ReadOnly Property gtycdeColumn As DataColumn
            Get
                Return Me.columngtycde
            End Get
        End Property
        
        Friend ReadOnly Property statusColumn As DataColumn
            Get
                Return Me.columnstatus
            End Get
        End Property
        
        Friend ReadOnly Property rectagColumn As DataColumn
            Get
                Return Me.columnrectag
            End Get
        End Property
        
        Friend ReadOnly Property useridColumn As DataColumn
            Get
                Return Me.columnuserid
            End Get
        End Property
        
        Friend ReadOnly Property updcdeColumn As DataColumn
            Get
                Return Me.columnupdcde
            End Get
        End Property
        
        Friend ReadOnly Property cfscyColumn As DataColumn
            Get
                Return Me.columncfscy
            End Get
        End Property
        
        Friend ReadOnly Property effdteColumn As DataColumn
            Get
                Return Me.columneffdte
            End Get
        End Property
        
        Friend ReadOnly Property noncntColumn As DataColumn
            Get
                Return Me.columnnoncnt
            End Get
        End Property
        
        Friend ReadOnly Property arrivalColumn As DataColumn
            Get
                Return Me.columnarrival
            End Get
        End Property
        
        Friend ReadOnly Property voynumColumn As DataColumn
            Get
                Return Me.columnvoynum
            End Get
        End Property
        
        Friend ReadOnly Property ContestedColumn As DataColumn
            Get
                Return Me.columnContested
            End Get
        End Property
        
        Friend ReadOnly Property termColumn As DataColumn
            Get
                Return Me.columnterm
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As INVICTRow
            Get
                Return CType(Me.Rows(index),INVICTRow)
            End Get
        End Property
        
        Public Event INVICTRowChanged As INVICTRowChangeEventHandler
        
        Public Event INVICTRowChanging As INVICTRowChangeEventHandler
        
        Public Event INVICTRowDeleted As INVICTRowChangeEventHandler
        
        Public Event INVICTRowDeleting As INVICTRowChangeEventHandler
        
        Public Overloads Sub AddINVICTRow(ByVal row As INVICTRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddINVICTRow( _
                    ByVal refnum As Decimal,  _
                    ByVal invnum As Decimal,  _
                    ByVal cuscde As String,  _
                    ByVal cusnam As String,  _
                    ByVal invdttm As Date,  _
                    ByVal vslnam As String,  _
                    ByVal regnum As String,  _
                    ByVal invremark As String,  _
                    ByVal invamt As Decimal,  _
                    ByVal invvat As Decimal,  _
                    ByVal invtax As Decimal,  _
                    ByVal totalpay As Decimal,  _
                    ByVal gtycde As String,  _
                    ByVal status As String,  _
                    ByVal rectag As String,  _
                    ByVal userid As String,  _
                    ByVal updcde As String,  _
                    ByVal cfscy As String,  _
                    ByVal effdte As String,  _
                    ByVal noncnt As String,  _
                    ByVal arrival As Date,  _
                    ByVal voynum As String,  _
                    ByVal Contested As String,  _
                    ByVal term As Integer) As INVICTRow
            Dim rowINVICTRow As INVICTRow = CType(Me.NewRow,INVICTRow)
            rowINVICTRow.ItemArray = New Object() {refnum, invnum, cuscde, cusnam, invdttm, vslnam, regnum, invremark, invamt, invvat, invtax, totalpay, gtycde, status, rectag, userid, updcde, cfscy, effdte, noncnt, arrival, voynum, Contested, term}
            Me.Rows.Add(rowINVICTRow)
            Return rowINVICTRow
        End Function
        
        Public Function FindByrefnum(ByVal refnum As Decimal) As INVICTRow
            Return CType(Me.Rows.Find(New Object() {refnum}),INVICTRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As INVICTDataTable = CType(MyBase.Clone,INVICTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New INVICTDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnrefnum = Me.Columns("refnum")
            Me.columninvnum = Me.Columns("invnum")
            Me.columncuscde = Me.Columns("cuscde")
            Me.columncusnam = Me.Columns("cusnam")
            Me.columninvdttm = Me.Columns("invdttm")
            Me.columnvslnam = Me.Columns("vslnam")
            Me.columnregnum = Me.Columns("regnum")
            Me.columninvremark = Me.Columns("invremark")
            Me.columninvamt = Me.Columns("invamt")
            Me.columninvvat = Me.Columns("invvat")
            Me.columninvtax = Me.Columns("invtax")
            Me.columntotalpay = Me.Columns("totalpay")
            Me.columngtycde = Me.Columns("gtycde")
            Me.columnstatus = Me.Columns("status")
            Me.columnrectag = Me.Columns("rectag")
            Me.columnuserid = Me.Columns("userid")
            Me.columnupdcde = Me.Columns("updcde")
            Me.columncfscy = Me.Columns("cfscy")
            Me.columneffdte = Me.Columns("effdte")
            Me.columnnoncnt = Me.Columns("noncnt")
            Me.columnarrival = Me.Columns("arrival")
            Me.columnvoynum = Me.Columns("voynum")
            Me.columnContested = Me.Columns("Contested")
            Me.columnterm = Me.Columns("term")
        End Sub
        
        Private Sub InitClass()
            Me.columnrefnum = New DataColumn("refnum", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnrefnum)
            Me.columninvnum = New DataColumn("invnum", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columninvnum)
            Me.columncuscde = New DataColumn("cuscde", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncuscde)
            Me.columncusnam = New DataColumn("cusnam", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncusnam)
            Me.columninvdttm = New DataColumn("invdttm", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columninvdttm)
            Me.columnvslnam = New DataColumn("vslnam", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnvslnam)
            Me.columnregnum = New DataColumn("regnum", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnregnum)
            Me.columninvremark = New DataColumn("invremark", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columninvremark)
            Me.columninvamt = New DataColumn("invamt", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columninvamt)
            Me.columninvvat = New DataColumn("invvat", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columninvvat)
            Me.columninvtax = New DataColumn("invtax", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columninvtax)
            Me.columntotalpay = New DataColumn("totalpay", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntotalpay)
            Me.columngtycde = New DataColumn("gtycde", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columngtycde)
            Me.columnstatus = New DataColumn("status", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnstatus)
            Me.columnrectag = New DataColumn("rectag", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnrectag)
            Me.columnuserid = New DataColumn("userid", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnuserid)
            Me.columnupdcde = New DataColumn("updcde", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnupdcde)
            Me.columncfscy = New DataColumn("cfscy", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncfscy)
            Me.columneffdte = New DataColumn("effdte", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columneffdte)
            Me.columnnoncnt = New DataColumn("noncnt", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnnoncnt)
            Me.columnarrival = New DataColumn("arrival", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnarrival)
            Me.columnvoynum = New DataColumn("voynum", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnvoynum)
            Me.columnContested = New DataColumn("Contested", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnContested)
            Me.columnterm = New DataColumn("term", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnterm)
            Me.Constraints.Add(New UniqueConstraint("dsAcctRptKey1", New DataColumn() {Me.columnrefnum}, true))
            Me.columnrefnum.AllowDBNull = false
            Me.columnrefnum.Unique = true
            Me.columninvnum.AllowDBNull = false
            Me.columncuscde.AllowDBNull = false
            Me.columngtycde.AllowDBNull = false
            Me.columnContested.AllowDBNull = false
        End Sub
        
        Public Function NewINVICTRow() As INVICTRow
            Return CType(Me.NewRow,INVICTRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New INVICTRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(INVICTRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.INVICTRowChangedEvent) Is Nothing) Then
                RaiseEvent INVICTRowChanged(Me, New INVICTRowChangeEvent(CType(e.Row,INVICTRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.INVICTRowChangingEvent) Is Nothing) Then
                RaiseEvent INVICTRowChanging(Me, New INVICTRowChangeEvent(CType(e.Row,INVICTRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.INVICTRowDeletedEvent) Is Nothing) Then
                RaiseEvent INVICTRowDeleted(Me, New INVICTRowChangeEvent(CType(e.Row,INVICTRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.INVICTRowDeletingEvent) Is Nothing) Then
                RaiseEvent INVICTRowDeleting(Me, New INVICTRowChangeEvent(CType(e.Row,INVICTRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveINVICTRow(ByVal row As INVICTRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class INVICTRow
        Inherits DataRow
        
        Private tableINVICT As INVICTDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableINVICT = CType(Me.Table,INVICTDataTable)
        End Sub
        
        Public Property refnum As Decimal
            Get
                Return CType(Me(Me.tableINVICT.refnumColumn),Decimal)
            End Get
            Set
                Me(Me.tableINVICT.refnumColumn) = value
            End Set
        End Property
        
        Public Property invnum As Decimal
            Get
                Return CType(Me(Me.tableINVICT.invnumColumn),Decimal)
            End Get
            Set
                Me(Me.tableINVICT.invnumColumn) = value
            End Set
        End Property
        
        Public Property cuscde As String
            Get
                Return CType(Me(Me.tableINVICT.cuscdeColumn),String)
            End Get
            Set
                Me(Me.tableINVICT.cuscdeColumn) = value
            End Set
        End Property
        
        Public Property cusnam As String
            Get
                Try 
                    Return CType(Me(Me.tableINVICT.cusnamColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVICT.cusnamColumn) = value
            End Set
        End Property
        
        Public Property invdttm As Date
            Get
                Try 
                    Return CType(Me(Me.tableINVICT.invdttmColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVICT.invdttmColumn) = value
            End Set
        End Property
        
        Public Property vslnam As String
            Get
                Try 
                    Return CType(Me(Me.tableINVICT.vslnamColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVICT.vslnamColumn) = value
            End Set
        End Property
        
        Public Property regnum As String
            Get
                Try 
                    Return CType(Me(Me.tableINVICT.regnumColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVICT.regnumColumn) = value
            End Set
        End Property
        
        Public Property invremark As String
            Get
                Try 
                    Return CType(Me(Me.tableINVICT.invremarkColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVICT.invremarkColumn) = value
            End Set
        End Property
        
        Public Property invamt As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINVICT.invamtColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVICT.invamtColumn) = value
            End Set
        End Property
        
        Public Property invvat As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINVICT.invvatColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVICT.invvatColumn) = value
            End Set
        End Property
        
        Public Property invtax As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINVICT.invtaxColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVICT.invtaxColumn) = value
            End Set
        End Property
        
        Public Property totalpay As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINVICT.totalpayColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVICT.totalpayColumn) = value
            End Set
        End Property
        
        Public Property gtycde As String
            Get
                Return CType(Me(Me.tableINVICT.gtycdeColumn),String)
            End Get
            Set
                Me(Me.tableINVICT.gtycdeColumn) = value
            End Set
        End Property
        
        Public Property status As String
            Get
                Try 
                    Return CType(Me(Me.tableINVICT.statusColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVICT.statusColumn) = value
            End Set
        End Property
        
        Public Property rectag As String
            Get
                Try 
                    Return CType(Me(Me.tableINVICT.rectagColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVICT.rectagColumn) = value
            End Set
        End Property
        
        Public Property userid As String
            Get
                Try 
                    Return CType(Me(Me.tableINVICT.useridColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVICT.useridColumn) = value
            End Set
        End Property
        
        Public Property updcde As String
            Get
                Try 
                    Return CType(Me(Me.tableINVICT.updcdeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVICT.updcdeColumn) = value
            End Set
        End Property
        
        Public Property cfscy As String
            Get
                Try 
                    Return CType(Me(Me.tableINVICT.cfscyColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVICT.cfscyColumn) = value
            End Set
        End Property
        
        Public Property effdte As String
            Get
                Try 
                    Return CType(Me(Me.tableINVICT.effdteColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVICT.effdteColumn) = value
            End Set
        End Property
        
        Public Property noncnt As String
            Get
                Try 
                    Return CType(Me(Me.tableINVICT.noncntColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVICT.noncntColumn) = value
            End Set
        End Property
        
        Public Property arrival As Date
            Get
                Try 
                    Return CType(Me(Me.tableINVICT.arrivalColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVICT.arrivalColumn) = value
            End Set
        End Property
        
        Public Property voynum As String
            Get
                Try 
                    Return CType(Me(Me.tableINVICT.voynumColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVICT.voynumColumn) = value
            End Set
        End Property
        
        Public Property Contested As String
            Get
                Return CType(Me(Me.tableINVICT.ContestedColumn),String)
            End Get
            Set
                Me(Me.tableINVICT.ContestedColumn) = value
            End Set
        End Property
        
        Public Property term As Integer
            Get
                Try 
                    Return CType(Me(Me.tableINVICT.termColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVICT.termColumn) = value
            End Set
        End Property
        
        Public Function IscusnamNull() As Boolean
            Return Me.IsNull(Me.tableINVICT.cusnamColumn)
        End Function
        
        Public Sub SetcusnamNull()
            Me(Me.tableINVICT.cusnamColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsinvdttmNull() As Boolean
            Return Me.IsNull(Me.tableINVICT.invdttmColumn)
        End Function
        
        Public Sub SetinvdttmNull()
            Me(Me.tableINVICT.invdttmColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsvslnamNull() As Boolean
            Return Me.IsNull(Me.tableINVICT.vslnamColumn)
        End Function
        
        Public Sub SetvslnamNull()
            Me(Me.tableINVICT.vslnamColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsregnumNull() As Boolean
            Return Me.IsNull(Me.tableINVICT.regnumColumn)
        End Function
        
        Public Sub SetregnumNull()
            Me(Me.tableINVICT.regnumColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsinvremarkNull() As Boolean
            Return Me.IsNull(Me.tableINVICT.invremarkColumn)
        End Function
        
        Public Sub SetinvremarkNull()
            Me(Me.tableINVICT.invremarkColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsinvamtNull() As Boolean
            Return Me.IsNull(Me.tableINVICT.invamtColumn)
        End Function
        
        Public Sub SetinvamtNull()
            Me(Me.tableINVICT.invamtColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsinvvatNull() As Boolean
            Return Me.IsNull(Me.tableINVICT.invvatColumn)
        End Function
        
        Public Sub SetinvvatNull()
            Me(Me.tableINVICT.invvatColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsinvtaxNull() As Boolean
            Return Me.IsNull(Me.tableINVICT.invtaxColumn)
        End Function
        
        Public Sub SetinvtaxNull()
            Me(Me.tableINVICT.invtaxColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstotalpayNull() As Boolean
            Return Me.IsNull(Me.tableINVICT.totalpayColumn)
        End Function
        
        Public Sub SettotalpayNull()
            Me(Me.tableINVICT.totalpayColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsstatusNull() As Boolean
            Return Me.IsNull(Me.tableINVICT.statusColumn)
        End Function
        
        Public Sub SetstatusNull()
            Me(Me.tableINVICT.statusColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsrectagNull() As Boolean
            Return Me.IsNull(Me.tableINVICT.rectagColumn)
        End Function
        
        Public Sub SetrectagNull()
            Me(Me.tableINVICT.rectagColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsuseridNull() As Boolean
            Return Me.IsNull(Me.tableINVICT.useridColumn)
        End Function
        
        Public Sub SetuseridNull()
            Me(Me.tableINVICT.useridColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsupdcdeNull() As Boolean
            Return Me.IsNull(Me.tableINVICT.updcdeColumn)
        End Function
        
        Public Sub SetupdcdeNull()
            Me(Me.tableINVICT.updcdeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscfscyNull() As Boolean
            Return Me.IsNull(Me.tableINVICT.cfscyColumn)
        End Function
        
        Public Sub SetcfscyNull()
            Me(Me.tableINVICT.cfscyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IseffdteNull() As Boolean
            Return Me.IsNull(Me.tableINVICT.effdteColumn)
        End Function
        
        Public Sub SeteffdteNull()
            Me(Me.tableINVICT.effdteColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsnoncntNull() As Boolean
            Return Me.IsNull(Me.tableINVICT.noncntColumn)
        End Function
        
        Public Sub SetnoncntNull()
            Me(Me.tableINVICT.noncntColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsarrivalNull() As Boolean
            Return Me.IsNull(Me.tableINVICT.arrivalColumn)
        End Function
        
        Public Sub SetarrivalNull()
            Me(Me.tableINVICT.arrivalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsvoynumNull() As Boolean
            Return Me.IsNull(Me.tableINVICT.voynumColumn)
        End Function
        
        Public Sub SetvoynumNull()
            Me(Me.tableINVICT.voynumColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstermNull() As Boolean
            Return Me.IsNull(Me.tableINVICT.termColumn)
        End Function
        
        Public Sub SettermNull()
            Me(Me.tableINVICT.termColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class INVICTRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As INVICTRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As INVICTRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As INVICTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class INVCYBDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnrefnum As DataColumn
        
        Private columnitmnum As DataColumn
        
        Private columnrtecde As DataColumn
        
        Private columncntsze As DataColumn
        
        Private columnrtedsc As DataColumn
        
        Private columnqty As DataColumn
        
        Private columndyshrs As DataColumn
        
        Private columnvatcde As DataColumn
        
        Private columninvamt As DataColumn
        
        Private columninvtax As DataColumn
        
        Private columninvvat As DataColumn
        
        Private columnsysdttm As DataColumn
        
        Private columnstatus As DataColumn
        
        Private columnrectag As DataColumn
        
        Private columnuserid As DataColumn
        
        Private columnupdcde As DataColumn
        
        Private columndiscnt As DataColumn
        
        Private columninvremark As DataColumn
        
        Private columncargo As DataColumn
        
        Private columnCompanyCode As DataColumn
        
        Friend Sub New()
            MyBase.New("INVCYB")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property refnumColumn As DataColumn
            Get
                Return Me.columnrefnum
            End Get
        End Property
        
        Friend ReadOnly Property itmnumColumn As DataColumn
            Get
                Return Me.columnitmnum
            End Get
        End Property
        
        Friend ReadOnly Property rtecdeColumn As DataColumn
            Get
                Return Me.columnrtecde
            End Get
        End Property
        
        Friend ReadOnly Property cntszeColumn As DataColumn
            Get
                Return Me.columncntsze
            End Get
        End Property
        
        Friend ReadOnly Property rtedscColumn As DataColumn
            Get
                Return Me.columnrtedsc
            End Get
        End Property
        
        Friend ReadOnly Property qtyColumn As DataColumn
            Get
                Return Me.columnqty
            End Get
        End Property
        
        Friend ReadOnly Property dyshrsColumn As DataColumn
            Get
                Return Me.columndyshrs
            End Get
        End Property
        
        Friend ReadOnly Property vatcdeColumn As DataColumn
            Get
                Return Me.columnvatcde
            End Get
        End Property
        
        Friend ReadOnly Property invamtColumn As DataColumn
            Get
                Return Me.columninvamt
            End Get
        End Property
        
        Friend ReadOnly Property invtaxColumn As DataColumn
            Get
                Return Me.columninvtax
            End Get
        End Property
        
        Friend ReadOnly Property invvatColumn As DataColumn
            Get
                Return Me.columninvvat
            End Get
        End Property
        
        Friend ReadOnly Property sysdttmColumn As DataColumn
            Get
                Return Me.columnsysdttm
            End Get
        End Property
        
        Friend ReadOnly Property statusColumn As DataColumn
            Get
                Return Me.columnstatus
            End Get
        End Property
        
        Friend ReadOnly Property rectagColumn As DataColumn
            Get
                Return Me.columnrectag
            End Get
        End Property
        
        Friend ReadOnly Property useridColumn As DataColumn
            Get
                Return Me.columnuserid
            End Get
        End Property
        
        Friend ReadOnly Property updcdeColumn As DataColumn
            Get
                Return Me.columnupdcde
            End Get
        End Property
        
        Friend ReadOnly Property discntColumn As DataColumn
            Get
                Return Me.columndiscnt
            End Get
        End Property
        
        Friend ReadOnly Property invremarkColumn As DataColumn
            Get
                Return Me.columninvremark
            End Get
        End Property
        
        Friend ReadOnly Property cargoColumn As DataColumn
            Get
                Return Me.columncargo
            End Get
        End Property
        
        Friend ReadOnly Property CompanyCodeColumn As DataColumn
            Get
                Return Me.columnCompanyCode
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As INVCYBRow
            Get
                Return CType(Me.Rows(index),INVCYBRow)
            End Get
        End Property
        
        Public Event INVCYBRowChanged As INVCYBRowChangeEventHandler
        
        Public Event INVCYBRowChanging As INVCYBRowChangeEventHandler
        
        Public Event INVCYBRowDeleted As INVCYBRowChangeEventHandler
        
        Public Event INVCYBRowDeleting As INVCYBRowChangeEventHandler
        
        Public Overloads Sub AddINVCYBRow(ByVal row As INVCYBRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddINVCYBRow( _
                    ByVal refnum As Decimal,  _
                    ByVal itmnum As Decimal,  _
                    ByVal rtecde As String,  _
                    ByVal cntsze As String,  _
                    ByVal rtedsc As String,  _
                    ByVal qty As Decimal,  _
                    ByVal dyshrs As Decimal,  _
                    ByVal vatcde As String,  _
                    ByVal invamt As Decimal,  _
                    ByVal invtax As Decimal,  _
                    ByVal invvat As Decimal,  _
                    ByVal sysdttm As Date,  _
                    ByVal status As String,  _
                    ByVal rectag As String,  _
                    ByVal userid As String,  _
                    ByVal updcde As String,  _
                    ByVal discnt As Decimal,  _
                    ByVal invremark As String,  _
                    ByVal cargo As String,  _
                    ByVal CompanyCode As String) As INVCYBRow
            Dim rowINVCYBRow As INVCYBRow = CType(Me.NewRow,INVCYBRow)
            rowINVCYBRow.ItemArray = New Object() {refnum, itmnum, rtecde, cntsze, rtedsc, qty, dyshrs, vatcde, invamt, invtax, invvat, sysdttm, status, rectag, userid, updcde, discnt, invremark, cargo, CompanyCode}
            Me.Rows.Add(rowINVCYBRow)
            Return rowINVCYBRow
        End Function
        
        Public Function FindByrefnumitmnum(ByVal refnum As Decimal, ByVal itmnum As Decimal) As INVCYBRow
            Return CType(Me.Rows.Find(New Object() {refnum, itmnum}),INVCYBRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As INVCYBDataTable = CType(MyBase.Clone,INVCYBDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New INVCYBDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnrefnum = Me.Columns("refnum")
            Me.columnitmnum = Me.Columns("itmnum")
            Me.columnrtecde = Me.Columns("rtecde")
            Me.columncntsze = Me.Columns("cntsze")
            Me.columnrtedsc = Me.Columns("rtedsc")
            Me.columnqty = Me.Columns("qty")
            Me.columndyshrs = Me.Columns("dyshrs")
            Me.columnvatcde = Me.Columns("vatcde")
            Me.columninvamt = Me.Columns("invamt")
            Me.columninvtax = Me.Columns("invtax")
            Me.columninvvat = Me.Columns("invvat")
            Me.columnsysdttm = Me.Columns("sysdttm")
            Me.columnstatus = Me.Columns("status")
            Me.columnrectag = Me.Columns("rectag")
            Me.columnuserid = Me.Columns("userid")
            Me.columnupdcde = Me.Columns("updcde")
            Me.columndiscnt = Me.Columns("discnt")
            Me.columninvremark = Me.Columns("invremark")
            Me.columncargo = Me.Columns("cargo")
            Me.columnCompanyCode = Me.Columns("CompanyCode")
        End Sub
        
        Private Sub InitClass()
            Me.columnrefnum = New DataColumn("refnum", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnrefnum)
            Me.columnitmnum = New DataColumn("itmnum", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnitmnum)
            Me.columnrtecde = New DataColumn("rtecde", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnrtecde)
            Me.columncntsze = New DataColumn("cntsze", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncntsze)
            Me.columnrtedsc = New DataColumn("rtedsc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnrtedsc)
            Me.columnqty = New DataColumn("qty", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnqty)
            Me.columndyshrs = New DataColumn("dyshrs", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndyshrs)
            Me.columnvatcde = New DataColumn("vatcde", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnvatcde)
            Me.columninvamt = New DataColumn("invamt", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columninvamt)
            Me.columninvtax = New DataColumn("invtax", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columninvtax)
            Me.columninvvat = New DataColumn("invvat", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columninvvat)
            Me.columnsysdttm = New DataColumn("sysdttm", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsysdttm)
            Me.columnstatus = New DataColumn("status", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnstatus)
            Me.columnrectag = New DataColumn("rectag", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnrectag)
            Me.columnuserid = New DataColumn("userid", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnuserid)
            Me.columnupdcde = New DataColumn("updcde", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnupdcde)
            Me.columndiscnt = New DataColumn("discnt", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndiscnt)
            Me.columninvremark = New DataColumn("invremark", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columninvremark)
            Me.columncargo = New DataColumn("cargo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncargo)
            Me.columnCompanyCode = New DataColumn("CompanyCode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCompanyCode)
            Me.Constraints.Add(New UniqueConstraint("dsAcctRptKey2", New DataColumn() {Me.columnrefnum, Me.columnitmnum}, true))
            Me.Constraints.Add(New UniqueConstraint("dsAcctRptKey4", New DataColumn() {Me.columnrtecde}, false))
            Me.columnrefnum.AllowDBNull = false
            Me.columnitmnum.AllowDBNull = false
            Me.columnrtecde.AllowDBNull = false
            Me.columnrtecde.Unique = true
        End Sub
        
        Public Function NewINVCYBRow() As INVCYBRow
            Return CType(Me.NewRow,INVCYBRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New INVCYBRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(INVCYBRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.INVCYBRowChangedEvent) Is Nothing) Then
                RaiseEvent INVCYBRowChanged(Me, New INVCYBRowChangeEvent(CType(e.Row,INVCYBRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.INVCYBRowChangingEvent) Is Nothing) Then
                RaiseEvent INVCYBRowChanging(Me, New INVCYBRowChangeEvent(CType(e.Row,INVCYBRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.INVCYBRowDeletedEvent) Is Nothing) Then
                RaiseEvent INVCYBRowDeleted(Me, New INVCYBRowChangeEvent(CType(e.Row,INVCYBRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.INVCYBRowDeletingEvent) Is Nothing) Then
                RaiseEvent INVCYBRowDeleting(Me, New INVCYBRowChangeEvent(CType(e.Row,INVCYBRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveINVCYBRow(ByVal row As INVCYBRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class INVCYBRow
        Inherits DataRow
        
        Private tableINVCYB As INVCYBDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableINVCYB = CType(Me.Table,INVCYBDataTable)
        End Sub
        
        Public Property refnum As Decimal
            Get
                Return CType(Me(Me.tableINVCYB.refnumColumn),Decimal)
            End Get
            Set
                Me(Me.tableINVCYB.refnumColumn) = value
            End Set
        End Property
        
        Public Property itmnum As Decimal
            Get
                Return CType(Me(Me.tableINVCYB.itmnumColumn),Decimal)
            End Get
            Set
                Me(Me.tableINVCYB.itmnumColumn) = value
            End Set
        End Property
        
        Public Property rtecde As String
            Get
                Return CType(Me(Me.tableINVCYB.rtecdeColumn),String)
            End Get
            Set
                Me(Me.tableINVCYB.rtecdeColumn) = value
            End Set
        End Property
        
        Public Property cntsze As String
            Get
                Try 
                    Return CType(Me(Me.tableINVCYB.cntszeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVCYB.cntszeColumn) = value
            End Set
        End Property
        
        Public Property rtedsc As String
            Get
                Try 
                    Return CType(Me(Me.tableINVCYB.rtedscColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVCYB.rtedscColumn) = value
            End Set
        End Property
        
        Public Property qty As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINVCYB.qtyColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVCYB.qtyColumn) = value
            End Set
        End Property
        
        Public Property dyshrs As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINVCYB.dyshrsColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVCYB.dyshrsColumn) = value
            End Set
        End Property
        
        Public Property vatcde As String
            Get
                Try 
                    Return CType(Me(Me.tableINVCYB.vatcdeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVCYB.vatcdeColumn) = value
            End Set
        End Property
        
        Public Property invamt As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINVCYB.invamtColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVCYB.invamtColumn) = value
            End Set
        End Property
        
        Public Property invtax As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINVCYB.invtaxColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVCYB.invtaxColumn) = value
            End Set
        End Property
        
        Public Property invvat As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINVCYB.invvatColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVCYB.invvatColumn) = value
            End Set
        End Property
        
        Public Property sysdttm As Date
            Get
                Try 
                    Return CType(Me(Me.tableINVCYB.sysdttmColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVCYB.sysdttmColumn) = value
            End Set
        End Property
        
        Public Property status As String
            Get
                Try 
                    Return CType(Me(Me.tableINVCYB.statusColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVCYB.statusColumn) = value
            End Set
        End Property
        
        Public Property rectag As String
            Get
                Try 
                    Return CType(Me(Me.tableINVCYB.rectagColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVCYB.rectagColumn) = value
            End Set
        End Property
        
        Public Property userid As String
            Get
                Try 
                    Return CType(Me(Me.tableINVCYB.useridColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVCYB.useridColumn) = value
            End Set
        End Property
        
        Public Property updcde As String
            Get
                Try 
                    Return CType(Me(Me.tableINVCYB.updcdeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVCYB.updcdeColumn) = value
            End Set
        End Property
        
        Public Property discnt As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINVCYB.discntColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVCYB.discntColumn) = value
            End Set
        End Property
        
        Public Property invremark As String
            Get
                Try 
                    Return CType(Me(Me.tableINVCYB.invremarkColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVCYB.invremarkColumn) = value
            End Set
        End Property
        
        Public Property cargo As String
            Get
                Try 
                    Return CType(Me(Me.tableINVCYB.cargoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVCYB.cargoColumn) = value
            End Set
        End Property
        
        Public Property CompanyCode As String
            Get
                Try 
                    Return CType(Me(Me.tableINVCYB.CompanyCodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVCYB.CompanyCodeColumn) = value
            End Set
        End Property
        
        Public Function IscntszeNull() As Boolean
            Return Me.IsNull(Me.tableINVCYB.cntszeColumn)
        End Function
        
        Public Sub SetcntszeNull()
            Me(Me.tableINVCYB.cntszeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsrtedscNull() As Boolean
            Return Me.IsNull(Me.tableINVCYB.rtedscColumn)
        End Function
        
        Public Sub SetrtedscNull()
            Me(Me.tableINVCYB.rtedscColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsqtyNull() As Boolean
            Return Me.IsNull(Me.tableINVCYB.qtyColumn)
        End Function
        
        Public Sub SetqtyNull()
            Me(Me.tableINVCYB.qtyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdyshrsNull() As Boolean
            Return Me.IsNull(Me.tableINVCYB.dyshrsColumn)
        End Function
        
        Public Sub SetdyshrsNull()
            Me(Me.tableINVCYB.dyshrsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsvatcdeNull() As Boolean
            Return Me.IsNull(Me.tableINVCYB.vatcdeColumn)
        End Function
        
        Public Sub SetvatcdeNull()
            Me(Me.tableINVCYB.vatcdeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsinvamtNull() As Boolean
            Return Me.IsNull(Me.tableINVCYB.invamtColumn)
        End Function
        
        Public Sub SetinvamtNull()
            Me(Me.tableINVCYB.invamtColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsinvtaxNull() As Boolean
            Return Me.IsNull(Me.tableINVCYB.invtaxColumn)
        End Function
        
        Public Sub SetinvtaxNull()
            Me(Me.tableINVCYB.invtaxColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsinvvatNull() As Boolean
            Return Me.IsNull(Me.tableINVCYB.invvatColumn)
        End Function
        
        Public Sub SetinvvatNull()
            Me(Me.tableINVCYB.invvatColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IssysdttmNull() As Boolean
            Return Me.IsNull(Me.tableINVCYB.sysdttmColumn)
        End Function
        
        Public Sub SetsysdttmNull()
            Me(Me.tableINVCYB.sysdttmColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsstatusNull() As Boolean
            Return Me.IsNull(Me.tableINVCYB.statusColumn)
        End Function
        
        Public Sub SetstatusNull()
            Me(Me.tableINVCYB.statusColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsrectagNull() As Boolean
            Return Me.IsNull(Me.tableINVCYB.rectagColumn)
        End Function
        
        Public Sub SetrectagNull()
            Me(Me.tableINVCYB.rectagColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsuseridNull() As Boolean
            Return Me.IsNull(Me.tableINVCYB.useridColumn)
        End Function
        
        Public Sub SetuseridNull()
            Me(Me.tableINVCYB.useridColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsupdcdeNull() As Boolean
            Return Me.IsNull(Me.tableINVCYB.updcdeColumn)
        End Function
        
        Public Sub SetupdcdeNull()
            Me(Me.tableINVCYB.updcdeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdiscntNull() As Boolean
            Return Me.IsNull(Me.tableINVCYB.discntColumn)
        End Function
        
        Public Sub SetdiscntNull()
            Me(Me.tableINVCYB.discntColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsinvremarkNull() As Boolean
            Return Me.IsNull(Me.tableINVCYB.invremarkColumn)
        End Function
        
        Public Sub SetinvremarkNull()
            Me(Me.tableINVCYB.invremarkColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscargoNull() As Boolean
            Return Me.IsNull(Me.tableINVCYB.cargoColumn)
        End Function
        
        Public Sub SetcargoNull()
            Me(Me.tableINVCYB.cargoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCompanyCodeNull() As Boolean
            Return Me.IsNull(Me.tableINVCYB.CompanyCodeColumn)
        End Function
        
        Public Sub SetCompanyCodeNull()
            Me(Me.tableINVCYB.CompanyCodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetCYRateRows() As CYRateRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("INVCYBCYRate")),CYRateRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class INVCYBRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As INVCYBRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As INVCYBRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As INVCYBRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class INVPAYDTLDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnORNUM As DataColumn
        
        Private columnINVNUM As DataColumn
        
        Private columnINVAmt As DataColumn
        
        Private columnPAYAmt As DataColumn
        
        Private columnPAYDate As DataColumn
        
        Private columnremarks As DataColumn
        
        Private columnRBALANCE As DataColumn
        
        Friend Sub New()
            MyBase.New("INVPAYDTL")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ORNUMColumn As DataColumn
            Get
                Return Me.columnORNUM
            End Get
        End Property
        
        Friend ReadOnly Property INVNUMColumn As DataColumn
            Get
                Return Me.columnINVNUM
            End Get
        End Property
        
        Friend ReadOnly Property INVAmtColumn As DataColumn
            Get
                Return Me.columnINVAmt
            End Get
        End Property
        
        Friend ReadOnly Property PAYAmtColumn As DataColumn
            Get
                Return Me.columnPAYAmt
            End Get
        End Property
        
        Friend ReadOnly Property PAYDateColumn As DataColumn
            Get
                Return Me.columnPAYDate
            End Get
        End Property
        
        Friend ReadOnly Property remarksColumn As DataColumn
            Get
                Return Me.columnremarks
            End Get
        End Property
        
        Friend ReadOnly Property RBALANCEColumn As DataColumn
            Get
                Return Me.columnRBALANCE
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As INVPAYDTLRow
            Get
                Return CType(Me.Rows(index),INVPAYDTLRow)
            End Get
        End Property
        
        Public Event INVPAYDTLRowChanged As INVPAYDTLRowChangeEventHandler
        
        Public Event INVPAYDTLRowChanging As INVPAYDTLRowChangeEventHandler
        
        Public Event INVPAYDTLRowDeleted As INVPAYDTLRowChangeEventHandler
        
        Public Event INVPAYDTLRowDeleting As INVPAYDTLRowChangeEventHandler
        
        Public Overloads Sub AddINVPAYDTLRow(ByVal row As INVPAYDTLRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddINVPAYDTLRow(ByVal ORNUM As Decimal, ByVal INVNUM As Decimal, ByVal INVAmt As Decimal, ByVal PAYAmt As Decimal, ByVal PAYDate As Date, ByVal remarks As String, ByVal RBALANCE As Decimal) As INVPAYDTLRow
            Dim rowINVPAYDTLRow As INVPAYDTLRow = CType(Me.NewRow,INVPAYDTLRow)
            rowINVPAYDTLRow.ItemArray = New Object() {ORNUM, INVNUM, INVAmt, PAYAmt, PAYDate, remarks, RBALANCE}
            Me.Rows.Add(rowINVPAYDTLRow)
            Return rowINVPAYDTLRow
        End Function
        
        Public Function FindByORNUMINVNUM(ByVal ORNUM As Decimal, ByVal INVNUM As Decimal) As INVPAYDTLRow
            Return CType(Me.Rows.Find(New Object() {ORNUM, INVNUM}),INVPAYDTLRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As INVPAYDTLDataTable = CType(MyBase.Clone,INVPAYDTLDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New INVPAYDTLDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnORNUM = Me.Columns("ORNUM")
            Me.columnINVNUM = Me.Columns("INVNUM")
            Me.columnINVAmt = Me.Columns("INVAmt")
            Me.columnPAYAmt = Me.Columns("PAYAmt")
            Me.columnPAYDate = Me.Columns("PAYDate")
            Me.columnremarks = Me.Columns("remarks")
            Me.columnRBALANCE = Me.Columns("RBALANCE")
        End Sub
        
        Private Sub InitClass()
            Me.columnORNUM = New DataColumn("ORNUM", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnORNUM)
            Me.columnINVNUM = New DataColumn("INVNUM", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnINVNUM)
            Me.columnINVAmt = New DataColumn("INVAmt", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnINVAmt)
            Me.columnPAYAmt = New DataColumn("PAYAmt", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPAYAmt)
            Me.columnPAYDate = New DataColumn("PAYDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPAYDate)
            Me.columnremarks = New DataColumn("remarks", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnremarks)
            Me.columnRBALANCE = New DataColumn("RBALANCE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRBALANCE)
            Me.Constraints.Add(New UniqueConstraint("dsAcctRptKey3", New DataColumn() {Me.columnORNUM, Me.columnINVNUM}, true))
            Me.columnORNUM.AllowDBNull = false
            Me.columnINVNUM.AllowDBNull = false
        End Sub
        
        Public Function NewINVPAYDTLRow() As INVPAYDTLRow
            Return CType(Me.NewRow,INVPAYDTLRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New INVPAYDTLRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(INVPAYDTLRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.INVPAYDTLRowChangedEvent) Is Nothing) Then
                RaiseEvent INVPAYDTLRowChanged(Me, New INVPAYDTLRowChangeEvent(CType(e.Row,INVPAYDTLRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.INVPAYDTLRowChangingEvent) Is Nothing) Then
                RaiseEvent INVPAYDTLRowChanging(Me, New INVPAYDTLRowChangeEvent(CType(e.Row,INVPAYDTLRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.INVPAYDTLRowDeletedEvent) Is Nothing) Then
                RaiseEvent INVPAYDTLRowDeleted(Me, New INVPAYDTLRowChangeEvent(CType(e.Row,INVPAYDTLRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.INVPAYDTLRowDeletingEvent) Is Nothing) Then
                RaiseEvent INVPAYDTLRowDeleting(Me, New INVPAYDTLRowChangeEvent(CType(e.Row,INVPAYDTLRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveINVPAYDTLRow(ByVal row As INVPAYDTLRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class INVPAYDTLRow
        Inherits DataRow
        
        Private tableINVPAYDTL As INVPAYDTLDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableINVPAYDTL = CType(Me.Table,INVPAYDTLDataTable)
        End Sub
        
        Public Property ORNUM As Decimal
            Get
                Return CType(Me(Me.tableINVPAYDTL.ORNUMColumn),Decimal)
            End Get
            Set
                Me(Me.tableINVPAYDTL.ORNUMColumn) = value
            End Set
        End Property
        
        Public Property INVNUM As Decimal
            Get
                Return CType(Me(Me.tableINVPAYDTL.INVNUMColumn),Decimal)
            End Get
            Set
                Me(Me.tableINVPAYDTL.INVNUMColumn) = value
            End Set
        End Property
        
        Public Property INVAmt As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINVPAYDTL.INVAmtColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVPAYDTL.INVAmtColumn) = value
            End Set
        End Property
        
        Public Property PAYAmt As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINVPAYDTL.PAYAmtColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVPAYDTL.PAYAmtColumn) = value
            End Set
        End Property
        
        Public Property PAYDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableINVPAYDTL.PAYDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVPAYDTL.PAYDateColumn) = value
            End Set
        End Property
        
        Public Property remarks As String
            Get
                Try 
                    Return CType(Me(Me.tableINVPAYDTL.remarksColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVPAYDTL.remarksColumn) = value
            End Set
        End Property
        
        Public Property RBALANCE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINVPAYDTL.RBALANCEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVPAYDTL.RBALANCEColumn) = value
            End Set
        End Property
        
        Public Function IsINVAmtNull() As Boolean
            Return Me.IsNull(Me.tableINVPAYDTL.INVAmtColumn)
        End Function
        
        Public Sub SetINVAmtNull()
            Me(Me.tableINVPAYDTL.INVAmtColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPAYAmtNull() As Boolean
            Return Me.IsNull(Me.tableINVPAYDTL.PAYAmtColumn)
        End Function
        
        Public Sub SetPAYAmtNull()
            Me(Me.tableINVPAYDTL.PAYAmtColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPAYDateNull() As Boolean
            Return Me.IsNull(Me.tableINVPAYDTL.PAYDateColumn)
        End Function
        
        Public Sub SetPAYDateNull()
            Me(Me.tableINVPAYDTL.PAYDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsremarksNull() As Boolean
            Return Me.IsNull(Me.tableINVPAYDTL.remarksColumn)
        End Function
        
        Public Sub SetremarksNull()
            Me(Me.tableINVPAYDTL.remarksColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRBALANCENull() As Boolean
            Return Me.IsNull(Me.tableINVPAYDTL.RBALANCEColumn)
        End Function
        
        Public Sub SetRBALANCENull()
            Me(Me.tableINVPAYDTL.RBALANCEColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class INVPAYDTLRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As INVPAYDTLRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As INVPAYDTLRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As INVPAYDTLRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CYRateDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncyr_rtecde As DataColumn
        
        Private columncyr_cntsze As DataColumn
        
        Private columncyr_rtetyp As DataColumn
        
        Private columncyr_rtedsc As DataColumn
        
        Private columncyr_rteamt As DataColumn
        
        Private columncyr_uomcde As DataColumn
        
        Private columncyr_acccde As DataColumn
        
        Private columncyr_updcde As DataColumn
        
        Private columncyr_userid As DataColumn
        
        Private columncyr_sysdte As DataColumn
        
        Private columncyr_biltyp As DataColumn
        
        Friend Sub New()
            MyBase.New("CYRate")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cyr_rtecdeColumn As DataColumn
            Get
                Return Me.columncyr_rtecde
            End Get
        End Property
        
        Friend ReadOnly Property cyr_cntszeColumn As DataColumn
            Get
                Return Me.columncyr_cntsze
            End Get
        End Property
        
        Friend ReadOnly Property cyr_rtetypColumn As DataColumn
            Get
                Return Me.columncyr_rtetyp
            End Get
        End Property
        
        Friend ReadOnly Property cyr_rtedscColumn As DataColumn
            Get
                Return Me.columncyr_rtedsc
            End Get
        End Property
        
        Friend ReadOnly Property cyr_rteamtColumn As DataColumn
            Get
                Return Me.columncyr_rteamt
            End Get
        End Property
        
        Friend ReadOnly Property cyr_uomcdeColumn As DataColumn
            Get
                Return Me.columncyr_uomcde
            End Get
        End Property
        
        Friend ReadOnly Property cyr_acccdeColumn As DataColumn
            Get
                Return Me.columncyr_acccde
            End Get
        End Property
        
        Friend ReadOnly Property cyr_updcdeColumn As DataColumn
            Get
                Return Me.columncyr_updcde
            End Get
        End Property
        
        Friend ReadOnly Property cyr_useridColumn As DataColumn
            Get
                Return Me.columncyr_userid
            End Get
        End Property
        
        Friend ReadOnly Property cyr_sysdteColumn As DataColumn
            Get
                Return Me.columncyr_sysdte
            End Get
        End Property
        
        Friend ReadOnly Property cyr_biltypColumn As DataColumn
            Get
                Return Me.columncyr_biltyp
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As CYRateRow
            Get
                Return CType(Me.Rows(index),CYRateRow)
            End Get
        End Property
        
        Public Event CYRateRowChanged As CYRateRowChangeEventHandler
        
        Public Event CYRateRowChanging As CYRateRowChangeEventHandler
        
        Public Event CYRateRowDeleted As CYRateRowChangeEventHandler
        
        Public Event CYRateRowDeleting As CYRateRowChangeEventHandler
        
        Public Overloads Sub AddCYRateRow(ByVal row As CYRateRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCYRateRow(ByVal parentINVCYBRowByINVCYBCYRate As INVCYBRow, ByVal cyr_cntsze As String, ByVal cyr_rtetyp As String, ByVal cyr_rtedsc As String, ByVal cyr_rteamt As Decimal, ByVal cyr_uomcde As String, ByVal cyr_acccde As String, ByVal cyr_updcde As String, ByVal cyr_userid As String, ByVal cyr_sysdte As Date, ByVal cyr_biltyp As String) As CYRateRow
            Dim rowCYRateRow As CYRateRow = CType(Me.NewRow,CYRateRow)
            rowCYRateRow.ItemArray = New Object() {parentINVCYBRowByINVCYBCYRate(2), cyr_cntsze, cyr_rtetyp, cyr_rtedsc, cyr_rteamt, cyr_uomcde, cyr_acccde, cyr_updcde, cyr_userid, cyr_sysdte, cyr_biltyp}
            Me.Rows.Add(rowCYRateRow)
            Return rowCYRateRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As CYRateDataTable = CType(MyBase.Clone,CYRateDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New CYRateDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncyr_rtecde = Me.Columns("cyr_rtecde")
            Me.columncyr_cntsze = Me.Columns("cyr_cntsze")
            Me.columncyr_rtetyp = Me.Columns("cyr_rtetyp")
            Me.columncyr_rtedsc = Me.Columns("cyr_rtedsc")
            Me.columncyr_rteamt = Me.Columns("cyr_rteamt")
            Me.columncyr_uomcde = Me.Columns("cyr_uomcde")
            Me.columncyr_acccde = Me.Columns("cyr_acccde")
            Me.columncyr_updcde = Me.Columns("cyr_updcde")
            Me.columncyr_userid = Me.Columns("cyr_userid")
            Me.columncyr_sysdte = Me.Columns("cyr_sysdte")
            Me.columncyr_biltyp = Me.Columns("cyr_biltyp")
        End Sub
        
        Private Sub InitClass()
            Me.columncyr_rtecde = New DataColumn("cyr_rtecde", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncyr_rtecde)
            Me.columncyr_cntsze = New DataColumn("cyr_cntsze", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncyr_cntsze)
            Me.columncyr_rtetyp = New DataColumn("cyr_rtetyp", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncyr_rtetyp)
            Me.columncyr_rtedsc = New DataColumn("cyr_rtedsc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncyr_rtedsc)
            Me.columncyr_rteamt = New DataColumn("cyr_rteamt", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncyr_rteamt)
            Me.columncyr_uomcde = New DataColumn("cyr_uomcde", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncyr_uomcde)
            Me.columncyr_acccde = New DataColumn("cyr_acccde", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncyr_acccde)
            Me.columncyr_updcde = New DataColumn("cyr_updcde", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncyr_updcde)
            Me.columncyr_userid = New DataColumn("cyr_userid", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncyr_userid)
            Me.columncyr_sysdte = New DataColumn("cyr_sysdte", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncyr_sysdte)
            Me.columncyr_biltyp = New DataColumn("cyr_biltyp", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncyr_biltyp)
            Me.columncyr_rtecde.AllowDBNull = false
            Me.columncyr_cntsze.AllowDBNull = false
        End Sub
        
        Public Function NewCYRateRow() As CYRateRow
            Return CType(Me.NewRow,CYRateRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New CYRateRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CYRateRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CYRateRowChangedEvent) Is Nothing) Then
                RaiseEvent CYRateRowChanged(Me, New CYRateRowChangeEvent(CType(e.Row,CYRateRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CYRateRowChangingEvent) Is Nothing) Then
                RaiseEvent CYRateRowChanging(Me, New CYRateRowChangeEvent(CType(e.Row,CYRateRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CYRateRowDeletedEvent) Is Nothing) Then
                RaiseEvent CYRateRowDeleted(Me, New CYRateRowChangeEvent(CType(e.Row,CYRateRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CYRateRowDeletingEvent) Is Nothing) Then
                RaiseEvent CYRateRowDeleting(Me, New CYRateRowChangeEvent(CType(e.Row,CYRateRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCYRateRow(ByVal row As CYRateRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CYRateRow
        Inherits DataRow
        
        Private tableCYRate As CYRateDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCYRate = CType(Me.Table,CYRateDataTable)
        End Sub
        
        Public Property cyr_rtecde As String
            Get
                Return CType(Me(Me.tableCYRate.cyr_rtecdeColumn),String)
            End Get
            Set
                Me(Me.tableCYRate.cyr_rtecdeColumn) = value
            End Set
        End Property
        
        Public Property cyr_cntsze As String
            Get
                Return CType(Me(Me.tableCYRate.cyr_cntszeColumn),String)
            End Get
            Set
                Me(Me.tableCYRate.cyr_cntszeColumn) = value
            End Set
        End Property
        
        Public Property cyr_rtetyp As String
            Get
                Try 
                    Return CType(Me(Me.tableCYRate.cyr_rtetypColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCYRate.cyr_rtetypColumn) = value
            End Set
        End Property
        
        Public Property cyr_rtedsc As String
            Get
                Try 
                    Return CType(Me(Me.tableCYRate.cyr_rtedscColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCYRate.cyr_rtedscColumn) = value
            End Set
        End Property
        
        Public Property cyr_rteamt As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCYRate.cyr_rteamtColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCYRate.cyr_rteamtColumn) = value
            End Set
        End Property
        
        Public Property cyr_uomcde As String
            Get
                Try 
                    Return CType(Me(Me.tableCYRate.cyr_uomcdeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCYRate.cyr_uomcdeColumn) = value
            End Set
        End Property
        
        Public Property cyr_acccde As String
            Get
                Try 
                    Return CType(Me(Me.tableCYRate.cyr_acccdeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCYRate.cyr_acccdeColumn) = value
            End Set
        End Property
        
        Public Property cyr_updcde As String
            Get
                Try 
                    Return CType(Me(Me.tableCYRate.cyr_updcdeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCYRate.cyr_updcdeColumn) = value
            End Set
        End Property
        
        Public Property cyr_userid As String
            Get
                Try 
                    Return CType(Me(Me.tableCYRate.cyr_useridColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCYRate.cyr_useridColumn) = value
            End Set
        End Property
        
        Public Property cyr_sysdte As Date
            Get
                Try 
                    Return CType(Me(Me.tableCYRate.cyr_sysdteColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCYRate.cyr_sysdteColumn) = value
            End Set
        End Property
        
        Public Property cyr_biltyp As String
            Get
                Try 
                    Return CType(Me(Me.tableCYRate.cyr_biltypColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCYRate.cyr_biltypColumn) = value
            End Set
        End Property
        
        Public Property INVCYBRow As INVCYBRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("INVCYBCYRate")),INVCYBRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("INVCYBCYRate"))
            End Set
        End Property
        
        Public Function Iscyr_rtetypNull() As Boolean
            Return Me.IsNull(Me.tableCYRate.cyr_rtetypColumn)
        End Function
        
        Public Sub Setcyr_rtetypNull()
            Me(Me.tableCYRate.cyr_rtetypColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscyr_rtedscNull() As Boolean
            Return Me.IsNull(Me.tableCYRate.cyr_rtedscColumn)
        End Function
        
        Public Sub Setcyr_rtedscNull()
            Me(Me.tableCYRate.cyr_rtedscColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscyr_rteamtNull() As Boolean
            Return Me.IsNull(Me.tableCYRate.cyr_rteamtColumn)
        End Function
        
        Public Sub Setcyr_rteamtNull()
            Me(Me.tableCYRate.cyr_rteamtColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscyr_uomcdeNull() As Boolean
            Return Me.IsNull(Me.tableCYRate.cyr_uomcdeColumn)
        End Function
        
        Public Sub Setcyr_uomcdeNull()
            Me(Me.tableCYRate.cyr_uomcdeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscyr_acccdeNull() As Boolean
            Return Me.IsNull(Me.tableCYRate.cyr_acccdeColumn)
        End Function
        
        Public Sub Setcyr_acccdeNull()
            Me(Me.tableCYRate.cyr_acccdeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscyr_updcdeNull() As Boolean
            Return Me.IsNull(Me.tableCYRate.cyr_updcdeColumn)
        End Function
        
        Public Sub Setcyr_updcdeNull()
            Me(Me.tableCYRate.cyr_updcdeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscyr_useridNull() As Boolean
            Return Me.IsNull(Me.tableCYRate.cyr_useridColumn)
        End Function
        
        Public Sub Setcyr_useridNull()
            Me(Me.tableCYRate.cyr_useridColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscyr_sysdteNull() As Boolean
            Return Me.IsNull(Me.tableCYRate.cyr_sysdteColumn)
        End Function
        
        Public Sub Setcyr_sysdteNull()
            Me(Me.tableCYRate.cyr_sysdteColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscyr_biltypNull() As Boolean
            Return Me.IsNull(Me.tableCYRate.cyr_biltypColumn)
        End Function
        
        Public Sub Setcyr_biltypNull()
            Me(Me.tableCYRate.cyr_biltypColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CYRateRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As CYRateRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As CYRateRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As CYRateRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SalesDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnInvdttm As DataColumn
        
        Private columninvnum As DataColumn
        
        Private columncusnam As DataColumn
        
        Private columninvamt As DataColumn
        
        Private columnVC As DataColumn
        
        Private columnCEX As DataColumn
        
        Private columnCIM As DataColumn
        
        Private columnSS As DataColumn
        
        Private columnOthers As DataColumn
        
        Private columnPayDate As DataColumn
        
        Private columnCompanyCode As DataColumn
        
        Friend Sub New()
            MyBase.New("Sales")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property InvdttmColumn As DataColumn
            Get
                Return Me.columnInvdttm
            End Get
        End Property
        
        Friend ReadOnly Property invnumColumn As DataColumn
            Get
                Return Me.columninvnum
            End Get
        End Property
        
        Friend ReadOnly Property cusnamColumn As DataColumn
            Get
                Return Me.columncusnam
            End Get
        End Property
        
        Friend ReadOnly Property invamtColumn As DataColumn
            Get
                Return Me.columninvamt
            End Get
        End Property
        
        Friend ReadOnly Property VCColumn As DataColumn
            Get
                Return Me.columnVC
            End Get
        End Property
        
        Friend ReadOnly Property CEXColumn As DataColumn
            Get
                Return Me.columnCEX
            End Get
        End Property
        
        Friend ReadOnly Property CIMColumn As DataColumn
            Get
                Return Me.columnCIM
            End Get
        End Property
        
        Friend ReadOnly Property SSColumn As DataColumn
            Get
                Return Me.columnSS
            End Get
        End Property
        
        Friend ReadOnly Property OthersColumn As DataColumn
            Get
                Return Me.columnOthers
            End Get
        End Property
        
        Friend ReadOnly Property PayDateColumn As DataColumn
            Get
                Return Me.columnPayDate
            End Get
        End Property
        
        Friend ReadOnly Property CompanyCodeColumn As DataColumn
            Get
                Return Me.columnCompanyCode
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As SalesRow
            Get
                Return CType(Me.Rows(index),SalesRow)
            End Get
        End Property
        
        Public Event SalesRowChanged As SalesRowChangeEventHandler
        
        Public Event SalesRowChanging As SalesRowChangeEventHandler
        
        Public Event SalesRowDeleted As SalesRowChangeEventHandler
        
        Public Event SalesRowDeleting As SalesRowChangeEventHandler
        
        Public Overloads Sub AddSalesRow(ByVal row As SalesRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddSalesRow(ByVal Invdttm As Date, ByVal invnum As Decimal, ByVal cusnam As String, ByVal invamt As Decimal, ByVal VC As Decimal, ByVal CEX As Decimal, ByVal CIM As Decimal, ByVal SS As Decimal, ByVal Others As Decimal, ByVal PayDate As Date, ByVal CompanyCode As String) As SalesRow
            Dim rowSalesRow As SalesRow = CType(Me.NewRow,SalesRow)
            rowSalesRow.ItemArray = New Object() {Invdttm, invnum, cusnam, invamt, VC, CEX, CIM, SS, Others, PayDate, CompanyCode}
            Me.Rows.Add(rowSalesRow)
            Return rowSalesRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As SalesDataTable = CType(MyBase.Clone,SalesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New SalesDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnInvdttm = Me.Columns("Invdttm")
            Me.columninvnum = Me.Columns("invnum")
            Me.columncusnam = Me.Columns("cusnam")
            Me.columninvamt = Me.Columns("invamt")
            Me.columnVC = Me.Columns("VC")
            Me.columnCEX = Me.Columns("CEX")
            Me.columnCIM = Me.Columns("CIM")
            Me.columnSS = Me.Columns("SS")
            Me.columnOthers = Me.Columns("Others")
            Me.columnPayDate = Me.Columns("PayDate")
            Me.columnCompanyCode = Me.Columns("CompanyCode")
        End Sub
        
        Private Sub InitClass()
            Me.columnInvdttm = New DataColumn("Invdttm", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnInvdttm)
            Me.columninvnum = New DataColumn("invnum", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columninvnum)
            Me.columncusnam = New DataColumn("cusnam", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncusnam)
            Me.columninvamt = New DataColumn("invamt", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columninvamt)
            Me.columnVC = New DataColumn("VC", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVC)
            Me.columnCEX = New DataColumn("CEX", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCEX)
            Me.columnCIM = New DataColumn("CIM", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCIM)
            Me.columnSS = New DataColumn("SS", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSS)
            Me.columnOthers = New DataColumn("Others", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOthers)
            Me.columnPayDate = New DataColumn("PayDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPayDate)
            Me.columnCompanyCode = New DataColumn("CompanyCode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCompanyCode)
        End Sub
        
        Public Function NewSalesRow() As SalesRow
            Return CType(Me.NewRow,SalesRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New SalesRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SalesRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SalesRowChangedEvent) Is Nothing) Then
                RaiseEvent SalesRowChanged(Me, New SalesRowChangeEvent(CType(e.Row,SalesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SalesRowChangingEvent) Is Nothing) Then
                RaiseEvent SalesRowChanging(Me, New SalesRowChangeEvent(CType(e.Row,SalesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SalesRowDeletedEvent) Is Nothing) Then
                RaiseEvent SalesRowDeleted(Me, New SalesRowChangeEvent(CType(e.Row,SalesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SalesRowDeletingEvent) Is Nothing) Then
                RaiseEvent SalesRowDeleting(Me, New SalesRowChangeEvent(CType(e.Row,SalesRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveSalesRow(ByVal row As SalesRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SalesRow
        Inherits DataRow
        
        Private tableSales As SalesDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableSales = CType(Me.Table,SalesDataTable)
        End Sub
        
        Public Property Invdttm As Date
            Get
                Try 
                    Return CType(Me(Me.tableSales.InvdttmColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSales.InvdttmColumn) = value
            End Set
        End Property
        
        Public Property invnum As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSales.invnumColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSales.invnumColumn) = value
            End Set
        End Property
        
        Public Property cusnam As String
            Get
                Try 
                    Return CType(Me(Me.tableSales.cusnamColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSales.cusnamColumn) = value
            End Set
        End Property
        
        Public Property invamt As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSales.invamtColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSales.invamtColumn) = value
            End Set
        End Property
        
        Public Property VC As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSales.VCColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSales.VCColumn) = value
            End Set
        End Property
        
        Public Property CEX As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSales.CEXColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSales.CEXColumn) = value
            End Set
        End Property
        
        Public Property CIM As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSales.CIMColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSales.CIMColumn) = value
            End Set
        End Property
        
        Public Property SS As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSales.SSColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSales.SSColumn) = value
            End Set
        End Property
        
        Public Property Others As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSales.OthersColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSales.OthersColumn) = value
            End Set
        End Property
        
        Public Property PayDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableSales.PayDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSales.PayDateColumn) = value
            End Set
        End Property
        
        Public Property CompanyCode As String
            Get
                Try 
                    Return CType(Me(Me.tableSales.CompanyCodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSales.CompanyCodeColumn) = value
            End Set
        End Property
        
        Public Function IsInvdttmNull() As Boolean
            Return Me.IsNull(Me.tableSales.InvdttmColumn)
        End Function
        
        Public Sub SetInvdttmNull()
            Me(Me.tableSales.InvdttmColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsinvnumNull() As Boolean
            Return Me.IsNull(Me.tableSales.invnumColumn)
        End Function
        
        Public Sub SetinvnumNull()
            Me(Me.tableSales.invnumColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscusnamNull() As Boolean
            Return Me.IsNull(Me.tableSales.cusnamColumn)
        End Function
        
        Public Sub SetcusnamNull()
            Me(Me.tableSales.cusnamColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsinvamtNull() As Boolean
            Return Me.IsNull(Me.tableSales.invamtColumn)
        End Function
        
        Public Sub SetinvamtNull()
            Me(Me.tableSales.invamtColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsVCNull() As Boolean
            Return Me.IsNull(Me.tableSales.VCColumn)
        End Function
        
        Public Sub SetVCNull()
            Me(Me.tableSales.VCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCEXNull() As Boolean
            Return Me.IsNull(Me.tableSales.CEXColumn)
        End Function
        
        Public Sub SetCEXNull()
            Me(Me.tableSales.CEXColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCIMNull() As Boolean
            Return Me.IsNull(Me.tableSales.CIMColumn)
        End Function
        
        Public Sub SetCIMNull()
            Me(Me.tableSales.CIMColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSSNull() As Boolean
            Return Me.IsNull(Me.tableSales.SSColumn)
        End Function
        
        Public Sub SetSSNull()
            Me(Me.tableSales.SSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOthersNull() As Boolean
            Return Me.IsNull(Me.tableSales.OthersColumn)
        End Function
        
        Public Sub SetOthersNull()
            Me(Me.tableSales.OthersColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPayDateNull() As Boolean
            Return Me.IsNull(Me.tableSales.PayDateColumn)
        End Function
        
        Public Sub SetPayDateNull()
            Me(Me.tableSales.PayDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCompanyCodeNull() As Boolean
            Return Me.IsNull(Me.tableSales.CompanyCodeColumn)
        End Function
        
        Public Sub SetCompanyCodeNull()
            Me(Me.tableSales.CompanyCodeColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SalesRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As SalesRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As SalesRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As SalesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CashDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnPddte As DataColumn
        
        Private columnDocNo As DataColumn
        
        Private columnORNo As DataColumn
        
        Private columnChkNo As DataColumn
        
        Private columnPayor As DataColumn
        
        Private columnAmt As DataColumn
        
        Private columnImpAmt As DataColumn
        
        Private columnExpAmt As DataColumn
        
        Private columnMcAmt As DataColumn
        
        Private columnSS As DataColumn
        
        Private columnAR As DataColumn
        
        Private columnSV As DataColumn
        
        Private columnCompanyCode As DataColumn
        
        Friend Sub New()
            MyBase.New("Cash")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property PddteColumn As DataColumn
            Get
                Return Me.columnPddte
            End Get
        End Property
        
        Friend ReadOnly Property DocNoColumn As DataColumn
            Get
                Return Me.columnDocNo
            End Get
        End Property
        
        Friend ReadOnly Property ORNoColumn As DataColumn
            Get
                Return Me.columnORNo
            End Get
        End Property
        
        Friend ReadOnly Property ChkNoColumn As DataColumn
            Get
                Return Me.columnChkNo
            End Get
        End Property
        
        Friend ReadOnly Property PayorColumn As DataColumn
            Get
                Return Me.columnPayor
            End Get
        End Property
        
        Friend ReadOnly Property AmtColumn As DataColumn
            Get
                Return Me.columnAmt
            End Get
        End Property
        
        Friend ReadOnly Property ImpAmtColumn As DataColumn
            Get
                Return Me.columnImpAmt
            End Get
        End Property
        
        Friend ReadOnly Property ExpAmtColumn As DataColumn
            Get
                Return Me.columnExpAmt
            End Get
        End Property
        
        Friend ReadOnly Property McAmtColumn As DataColumn
            Get
                Return Me.columnMcAmt
            End Get
        End Property
        
        Friend ReadOnly Property SSColumn As DataColumn
            Get
                Return Me.columnSS
            End Get
        End Property
        
        Friend ReadOnly Property ARColumn As DataColumn
            Get
                Return Me.columnAR
            End Get
        End Property
        
        Friend ReadOnly Property SVColumn As DataColumn
            Get
                Return Me.columnSV
            End Get
        End Property
        
        Friend ReadOnly Property CompanyCodeColumn As DataColumn
            Get
                Return Me.columnCompanyCode
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As CashRow
            Get
                Return CType(Me.Rows(index),CashRow)
            End Get
        End Property
        
        Public Event CashRowChanged As CashRowChangeEventHandler
        
        Public Event CashRowChanging As CashRowChangeEventHandler
        
        Public Event CashRowDeleted As CashRowChangeEventHandler
        
        Public Event CashRowDeleting As CashRowChangeEventHandler
        
        Public Overloads Sub AddCashRow(ByVal row As CashRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCashRow(ByVal Pddte As Date, ByVal DocNo As String, ByVal ORNo As String, ByVal ChkNo As String, ByVal Payor As String, ByVal Amt As Decimal, ByVal ImpAmt As Decimal, ByVal ExpAmt As Decimal, ByVal McAmt As Decimal, ByVal SS As Decimal, ByVal AR As Decimal, ByVal SV As Decimal, ByVal CompanyCode As String) As CashRow
            Dim rowCashRow As CashRow = CType(Me.NewRow,CashRow)
            rowCashRow.ItemArray = New Object() {Pddte, DocNo, ORNo, ChkNo, Payor, Amt, ImpAmt, ExpAmt, McAmt, SS, AR, SV, CompanyCode}
            Me.Rows.Add(rowCashRow)
            Return rowCashRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As CashDataTable = CType(MyBase.Clone,CashDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New CashDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnPddte = Me.Columns("Pddte")
            Me.columnDocNo = Me.Columns("DocNo")
            Me.columnORNo = Me.Columns("ORNo")
            Me.columnChkNo = Me.Columns("ChkNo")
            Me.columnPayor = Me.Columns("Payor")
            Me.columnAmt = Me.Columns("Amt")
            Me.columnImpAmt = Me.Columns("ImpAmt")
            Me.columnExpAmt = Me.Columns("ExpAmt")
            Me.columnMcAmt = Me.Columns("McAmt")
            Me.columnSS = Me.Columns("SS")
            Me.columnAR = Me.Columns("AR")
            Me.columnSV = Me.Columns("SV")
            Me.columnCompanyCode = Me.Columns("CompanyCode")
        End Sub
        
        Private Sub InitClass()
            Me.columnPddte = New DataColumn("Pddte", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPddte)
            Me.columnDocNo = New DataColumn("DocNo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDocNo)
            Me.columnORNo = New DataColumn("ORNo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnORNo)
            Me.columnChkNo = New DataColumn("ChkNo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnChkNo)
            Me.columnPayor = New DataColumn("Payor", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPayor)
            Me.columnAmt = New DataColumn("Amt", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAmt)
            Me.columnImpAmt = New DataColumn("ImpAmt", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnImpAmt)
            Me.columnExpAmt = New DataColumn("ExpAmt", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnExpAmt)
            Me.columnMcAmt = New DataColumn("McAmt", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMcAmt)
            Me.columnSS = New DataColumn("SS", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSS)
            Me.columnAR = New DataColumn("AR", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAR)
            Me.columnSV = New DataColumn("SV", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSV)
            Me.columnCompanyCode = New DataColumn("CompanyCode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCompanyCode)
        End Sub
        
        Public Function NewCashRow() As CashRow
            Return CType(Me.NewRow,CashRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New CashRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CashRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CashRowChangedEvent) Is Nothing) Then
                RaiseEvent CashRowChanged(Me, New CashRowChangeEvent(CType(e.Row,CashRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CashRowChangingEvent) Is Nothing) Then
                RaiseEvent CashRowChanging(Me, New CashRowChangeEvent(CType(e.Row,CashRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CashRowDeletedEvent) Is Nothing) Then
                RaiseEvent CashRowDeleted(Me, New CashRowChangeEvent(CType(e.Row,CashRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CashRowDeletingEvent) Is Nothing) Then
                RaiseEvent CashRowDeleting(Me, New CashRowChangeEvent(CType(e.Row,CashRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCashRow(ByVal row As CashRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CashRow
        Inherits DataRow
        
        Private tableCash As CashDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCash = CType(Me.Table,CashDataTable)
        End Sub
        
        Public Property Pddte As Date
            Get
                Try 
                    Return CType(Me(Me.tableCash.PddteColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCash.PddteColumn) = value
            End Set
        End Property
        
        Public Property DocNo As String
            Get
                Try 
                    Return CType(Me(Me.tableCash.DocNoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCash.DocNoColumn) = value
            End Set
        End Property
        
        Public Property ORNo As String
            Get
                Try 
                    Return CType(Me(Me.tableCash.ORNoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCash.ORNoColumn) = value
            End Set
        End Property
        
        Public Property ChkNo As String
            Get
                Try 
                    Return CType(Me(Me.tableCash.ChkNoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCash.ChkNoColumn) = value
            End Set
        End Property
        
        Public Property Payor As String
            Get
                Try 
                    Return CType(Me(Me.tableCash.PayorColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCash.PayorColumn) = value
            End Set
        End Property
        
        Public Property Amt As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCash.AmtColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCash.AmtColumn) = value
            End Set
        End Property
        
        Public Property ImpAmt As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCash.ImpAmtColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCash.ImpAmtColumn) = value
            End Set
        End Property
        
        Public Property ExpAmt As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCash.ExpAmtColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCash.ExpAmtColumn) = value
            End Set
        End Property
        
        Public Property McAmt As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCash.McAmtColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCash.McAmtColumn) = value
            End Set
        End Property
        
        Public Property SS As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCash.SSColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCash.SSColumn) = value
            End Set
        End Property
        
        Public Property AR As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCash.ARColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCash.ARColumn) = value
            End Set
        End Property
        
        Public Property SV As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCash.SVColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCash.SVColumn) = value
            End Set
        End Property
        
        Public Property CompanyCode As String
            Get
                Try 
                    Return CType(Me(Me.tableCash.CompanyCodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCash.CompanyCodeColumn) = value
            End Set
        End Property
        
        Public Function IsPddteNull() As Boolean
            Return Me.IsNull(Me.tableCash.PddteColumn)
        End Function
        
        Public Sub SetPddteNull()
            Me(Me.tableCash.PddteColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDocNoNull() As Boolean
            Return Me.IsNull(Me.tableCash.DocNoColumn)
        End Function
        
        Public Sub SetDocNoNull()
            Me(Me.tableCash.DocNoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsORNoNull() As Boolean
            Return Me.IsNull(Me.tableCash.ORNoColumn)
        End Function
        
        Public Sub SetORNoNull()
            Me(Me.tableCash.ORNoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsChkNoNull() As Boolean
            Return Me.IsNull(Me.tableCash.ChkNoColumn)
        End Function
        
        Public Sub SetChkNoNull()
            Me(Me.tableCash.ChkNoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPayorNull() As Boolean
            Return Me.IsNull(Me.tableCash.PayorColumn)
        End Function
        
        Public Sub SetPayorNull()
            Me(Me.tableCash.PayorColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAmtNull() As Boolean
            Return Me.IsNull(Me.tableCash.AmtColumn)
        End Function
        
        Public Sub SetAmtNull()
            Me(Me.tableCash.AmtColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsImpAmtNull() As Boolean
            Return Me.IsNull(Me.tableCash.ImpAmtColumn)
        End Function
        
        Public Sub SetImpAmtNull()
            Me(Me.tableCash.ImpAmtColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsExpAmtNull() As Boolean
            Return Me.IsNull(Me.tableCash.ExpAmtColumn)
        End Function
        
        Public Sub SetExpAmtNull()
            Me(Me.tableCash.ExpAmtColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMcAmtNull() As Boolean
            Return Me.IsNull(Me.tableCash.McAmtColumn)
        End Function
        
        Public Sub SetMcAmtNull()
            Me(Me.tableCash.McAmtColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSSNull() As Boolean
            Return Me.IsNull(Me.tableCash.SSColumn)
        End Function
        
        Public Sub SetSSNull()
            Me(Me.tableCash.SSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsARNull() As Boolean
            Return Me.IsNull(Me.tableCash.ARColumn)
        End Function
        
        Public Sub SetARNull()
            Me(Me.tableCash.ARColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSVNull() As Boolean
            Return Me.IsNull(Me.tableCash.SVColumn)
        End Function
        
        Public Sub SetSVNull()
            Me(Me.tableCash.SVColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCompanyCodeNull() As Boolean
            Return Me.IsNull(Me.tableCash.CompanyCodeColumn)
        End Function
        
        Public Sub SetCompanyCodeNull()
            Me(Me.tableCash.CompanyCodeColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CashRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As CashRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As CashRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As CashRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
