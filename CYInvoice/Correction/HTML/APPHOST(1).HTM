<html>
	<head>
		<title>Application Host</title>
		<LINK REL="StyleSheet" HREF="vsHome.css" type="text/css" />
	</head>
	<script>
		var g_MSXML_DOM = "MSXML2.DOMDocument.3.0";
		var g_MSXML_Schema_DOM = "Msxml2.XMLSchemaCache.3.0";
		var g_valSchema = null;

		var g_bDebug = false;

		var L_AppLoadErr_HTMLText = "Failed to load application.";
		var L_NOAppSelected_HTMLText = "No Application Selected.";
		var L_FindingProvider_HTMLText ="Finding Host Provider";
		var L_ErrorGettingHostLocation_HTMLText = "Error finding hoster's application";
		var L_GettingApplication_HTMLText = "Loading Application";
		var L_Done_HTMLText = "Done";
		var sAppID = String(document.location.href).split("?");

		if(sAppID.length>1)sAppID = sAppID[1].split("&");

		var oArrArgs = new Array();

		for(var i = 0; i<sAppID.length;i++){
			oID = sAppID[i].split("=");
			oArrArgs[oID[0].toLowerCase()] = oID[1];
		}

		sAppID = oArrArgs["guid"];

		if(sAppID){
			var xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
			var xml = new ActiveXObject("MSXML2.DOMDocument.3.0");
				
			xml.async = false;

			window.status = L_FindingProvider_HTMLText; 

			// search yellow pages for web hosting app provider
			xmlhttp.open("GET", "http://msdn.microsoft.com/vsdata/webhosting/hostingYP.xml", false);
			xmlhttp.send();
			
			try{
				xml.loadXML(xmlhttp.responseXML.xml);
				if(!xml.parseError.number || xml.parseError.number==0){
					var sURL = xml.selectSingleNode("apps/app[guid/text() ='"+sAppID+"']/url").text;
				}
			}catch(e){
				alert(L_ErrorGettingHostLocation_HTMLText);
			}
			
			// extracted URL from response to install web hosting app
			
			var oXML = new ActiveXObject("MSXML2.DOMDocument.3.0");
			var oXSL = new ActiveXObject("MSXML2.DOMDocument.3.0");
			oXML.async = false;
			oXSL.async = false;

			var sXML = "";
			var bSuccess = false;
			
			oXSL.load("vshome.xsl");

			window.status = L_GettingApplication_HTMLText; 
			
			try{
				sXML = window.external.Globals.VariableValue(sAppID);
			}catch(m){
				//noop;
			}
			
			try{	
				if(sXML==""){
					// get web hosting install app from URL
					xmlhttp.open("GET", sURL+"/install.xml", false);	
					xmlhttp.send(); 
					sXML = xmlhttp.responseXML.xml;
				}
			}catch(e){}
			
			oXML.loadXML(sXML);
			
			if(oXML.parseError.reason=="" && oXSL.parseError.reason==""){

				var oValidXML = new ActiveXObject(g_MSXML_DOM);
				var fValidated = fnLoadAndValidate(oXML,oValidXML);
				
				if(fValidated) {
					document.write( oXML.transformNode(oXSL) );
					bSuccess = true;
				} else {
					document.write(L_AppLoadErr_HTMLText);
				}
			}else{
				document.write(L_AppLoadErr_HTMLText);
			}

			try{
				window.external.Globals.VariableValue(sAppID) = sXML;
				window.external.Globals.VariablePersists(sAppID) = false; // bSuccess;
			}catch(e){}

		// received web hosting install app

		}else{
			alert(L_NOAppSelected_HTMLText);
		}

		window.status = L_Done_HTMLText;
		
		function fnLoadAndValidate(oTab, xmlobj)
		{
			var isValid = false;
			try {
				if (g_valSchema == null) {
					g_valSchema = new ActiveXObject(g_MSXML_Schema_DOM);

					// load xdr from client
					try {
						g_valSchema.add("", "vstab.xdr");
					} catch (e) {
						fnAssert(false, "XDR schema error: " + e.description);
					}
				}
				try {
					xmlobj.validateOnParse = true;
					xmlobj.schemas = g_valSchema;
					xmlobj.loadXML(oTab.xml);
					isValid = (xmlobj.parseError == 0);
					if (xmlobj.parseError != 0) {
						fnAssert(false, "Content validation error: " + xmlobj.parseError.reason);
					}
				} catch (e) {
					fnAssert(false, "XML parse or validation error: " + e.message);
					fnAssert(false, "Error Code: " + e.errorCode + "\nReason: " + e.reason);
					isValid = false;
				}
				if (!isValid) {
					xmlobj.loadXML("<vsapp/>");	// dummy data that won't result in an app
				}
			} catch (e) {
				fnAssert(false, "L&V: " + e.message);
			}
			return isValid;
		}

		function fnAssert(bForce, sMsg){
			if (g_bDebug || bForce) {alert(sMsg);}
		}
	</script>
</html>
