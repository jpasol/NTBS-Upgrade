'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class dtasetCAC
    Inherits DataSet
    
    Private tableCASH As CASHDataTable
    
    Private tableCHEQUE As CHEQUEDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("CASH")) Is Nothing) Then
                Me.Tables.Add(New CASHDataTable(ds.Tables("CASH")))
            End If
            If (Not (ds.Tables("CHEQUE")) Is Nothing) Then
                Me.Tables.Add(New CHEQUEDataTable(ds.Tables("CHEQUE")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CASH As CASHDataTable
        Get
            Return Me.tableCASH
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CHEQUE As CHEQUEDataTable
        Get
            Return Me.tableCHEQUE
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As dtasetCAC = CType(MyBase.Clone,dtasetCAC)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("CASH")) Is Nothing) Then
            Me.Tables.Add(New CASHDataTable(ds.Tables("CASH")))
        End If
        If (Not (ds.Tables("CHEQUE")) Is Nothing) Then
            Me.Tables.Add(New CHEQUEDataTable(ds.Tables("CHEQUE")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableCASH = CType(Me.Tables("CASH"),CASHDataTable)
        If (Not (Me.tableCASH) Is Nothing) Then
            Me.tableCASH.InitVars
        End If
        Me.tableCHEQUE = CType(Me.Tables("CHEQUE"),CHEQUEDataTable)
        If (Not (Me.tableCHEQUE) Is Nothing) Then
            Me.tableCHEQUE.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "dtasetCAC"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dtasetCAC.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableCASH = New CASHDataTable
        Me.Tables.Add(Me.tableCASH)
        Me.tableCHEQUE = New CHEQUEDataTable
        Me.Tables.Add(Me.tableCHEQUE)
    End Sub
    
    Private Function ShouldSerializeCASH() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeCHEQUE() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub CASHRowChangeEventHandler(ByVal sender As Object, ByVal e As CASHRowChangeEvent)
    
    Public Delegate Sub CHEQUERowChangeEventHandler(ByVal sender As Object, ByVal e As CHEQUERowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CASHDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnQuantity As DataColumn
        
        Private columnDenomination As DataColumn
        
        Private columnAmount As DataColumn
        
        Friend Sub New()
            MyBase.New("CASH")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property QuantityColumn As DataColumn
            Get
                Return Me.columnQuantity
            End Get
        End Property
        
        Friend ReadOnly Property DenominationColumn As DataColumn
            Get
                Return Me.columnDenomination
            End Get
        End Property
        
        Friend ReadOnly Property AmountColumn As DataColumn
            Get
                Return Me.columnAmount
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As CASHRow
            Get
                Return CType(Me.Rows(index),CASHRow)
            End Get
        End Property
        
        Public Event CASHRowChanged As CASHRowChangeEventHandler
        
        Public Event CASHRowChanging As CASHRowChangeEventHandler
        
        Public Event CASHRowDeleted As CASHRowChangeEventHandler
        
        Public Event CASHRowDeleting As CASHRowChangeEventHandler
        
        Public Overloads Sub AddCASHRow(ByVal row As CASHRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCASHRow(ByVal Quantity As Long, ByVal Denomination As String, ByVal Amount As Decimal) As CASHRow
            Dim rowCASHRow As CASHRow = CType(Me.NewRow,CASHRow)
            rowCASHRow.ItemArray = New Object() {Quantity, Denomination, Amount}
            Me.Rows.Add(rowCASHRow)
            Return rowCASHRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As CASHDataTable = CType(MyBase.Clone,CASHDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New CASHDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnQuantity = Me.Columns("Quantity")
            Me.columnDenomination = Me.Columns("Denomination")
            Me.columnAmount = Me.Columns("Amount")
        End Sub
        
        Private Sub InitClass()
            Me.columnQuantity = New DataColumn("Quantity", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnQuantity)
            Me.columnDenomination = New DataColumn("Denomination", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDenomination)
            Me.columnAmount = New DataColumn("Amount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAmount)
        End Sub
        
        Public Function NewCASHRow() As CASHRow
            Return CType(Me.NewRow,CASHRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New CASHRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CASHRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CASHRowChangedEvent) Is Nothing) Then
                RaiseEvent CASHRowChanged(Me, New CASHRowChangeEvent(CType(e.Row,CASHRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CASHRowChangingEvent) Is Nothing) Then
                RaiseEvent CASHRowChanging(Me, New CASHRowChangeEvent(CType(e.Row,CASHRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CASHRowDeletedEvent) Is Nothing) Then
                RaiseEvent CASHRowDeleted(Me, New CASHRowChangeEvent(CType(e.Row,CASHRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CASHRowDeletingEvent) Is Nothing) Then
                RaiseEvent CASHRowDeleting(Me, New CASHRowChangeEvent(CType(e.Row,CASHRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCASHRow(ByVal row As CASHRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CASHRow
        Inherits DataRow
        
        Private tableCASH As CASHDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCASH = CType(Me.Table,CASHDataTable)
        End Sub
        
        Public Property Quantity As Long
            Get
                Try 
                    Return CType(Me(Me.tableCASH.QuantityColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCASH.QuantityColumn) = value
            End Set
        End Property
        
        Public Property Denomination As String
            Get
                Try 
                    Return CType(Me(Me.tableCASH.DenominationColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCASH.DenominationColumn) = value
            End Set
        End Property
        
        Public Property Amount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCASH.AmountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCASH.AmountColumn) = value
            End Set
        End Property
        
        Public Function IsQuantityNull() As Boolean
            Return Me.IsNull(Me.tableCASH.QuantityColumn)
        End Function
        
        Public Sub SetQuantityNull()
            Me(Me.tableCASH.QuantityColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDenominationNull() As Boolean
            Return Me.IsNull(Me.tableCASH.DenominationColumn)
        End Function
        
        Public Sub SetDenominationNull()
            Me(Me.tableCASH.DenominationColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAmountNull() As Boolean
            Return Me.IsNull(Me.tableCASH.AmountColumn)
        End Function
        
        Public Sub SetAmountNull()
            Me(Me.tableCASH.AmountColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CASHRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As CASHRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As CASHRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As CASHRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CHEQUEDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnBank As DataColumn
        
        Private column_Cheque_No_ As DataColumn
        
        Private columnAmount As DataColumn
        
        Private columnExcess As DataColumn
        
        Friend Sub New()
            MyBase.New("CHEQUE")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property BankColumn As DataColumn
            Get
                Return Me.columnBank
            End Get
        End Property
        
        Friend ReadOnly Property _Cheque_No_Column As DataColumn
            Get
                Return Me.column_Cheque_No_
            End Get
        End Property
        
        Friend ReadOnly Property AmountColumn As DataColumn
            Get
                Return Me.columnAmount
            End Get
        End Property
        
        Friend ReadOnly Property ExcessColumn As DataColumn
            Get
                Return Me.columnExcess
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As CHEQUERow
            Get
                Return CType(Me.Rows(index),CHEQUERow)
            End Get
        End Property
        
        Public Event CHEQUERowChanged As CHEQUERowChangeEventHandler
        
        Public Event CHEQUERowChanging As CHEQUERowChangeEventHandler
        
        Public Event CHEQUERowDeleted As CHEQUERowChangeEventHandler
        
        Public Event CHEQUERowDeleting As CHEQUERowChangeEventHandler
        
        Public Overloads Sub AddCHEQUERow(ByVal row As CHEQUERow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCHEQUERow(ByVal Bank As String, ByVal _Cheque_No_ As String, ByVal Amount As Decimal, ByVal Excess As Decimal) As CHEQUERow
            Dim rowCHEQUERow As CHEQUERow = CType(Me.NewRow,CHEQUERow)
            rowCHEQUERow.ItemArray = New Object() {Bank, _Cheque_No_, Amount, Excess}
            Me.Rows.Add(rowCHEQUERow)
            Return rowCHEQUERow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As CHEQUEDataTable = CType(MyBase.Clone,CHEQUEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New CHEQUEDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnBank = Me.Columns("Bank")
            Me.column_Cheque_No_ = Me.Columns("Cheque No.")
            Me.columnAmount = Me.Columns("Amount")
            Me.columnExcess = Me.Columns("Excess")
        End Sub
        
        Private Sub InitClass()
            Me.columnBank = New DataColumn("Bank", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBank)
            Me.column_Cheque_No_ = New DataColumn("Cheque No.", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column_Cheque_No_)
            Me.columnAmount = New DataColumn("Amount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAmount)
            Me.columnExcess = New DataColumn("Excess", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnExcess)
        End Sub
        
        Public Function NewCHEQUERow() As CHEQUERow
            Return CType(Me.NewRow,CHEQUERow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New CHEQUERow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CHEQUERow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CHEQUERowChangedEvent) Is Nothing) Then
                RaiseEvent CHEQUERowChanged(Me, New CHEQUERowChangeEvent(CType(e.Row,CHEQUERow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CHEQUERowChangingEvent) Is Nothing) Then
                RaiseEvent CHEQUERowChanging(Me, New CHEQUERowChangeEvent(CType(e.Row,CHEQUERow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CHEQUERowDeletedEvent) Is Nothing) Then
                RaiseEvent CHEQUERowDeleted(Me, New CHEQUERowChangeEvent(CType(e.Row,CHEQUERow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CHEQUERowDeletingEvent) Is Nothing) Then
                RaiseEvent CHEQUERowDeleting(Me, New CHEQUERowChangeEvent(CType(e.Row,CHEQUERow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCHEQUERow(ByVal row As CHEQUERow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CHEQUERow
        Inherits DataRow
        
        Private tableCHEQUE As CHEQUEDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCHEQUE = CType(Me.Table,CHEQUEDataTable)
        End Sub
        
        Public Property Bank As String
            Get
                Try 
                    Return CType(Me(Me.tableCHEQUE.BankColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCHEQUE.BankColumn) = value
            End Set
        End Property
        
        Public Property _Cheque_No_ As String
            Get
                Try 
                    Return CType(Me(Me.tableCHEQUE._Cheque_No_Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCHEQUE._Cheque_No_Column) = value
            End Set
        End Property
        
        Public Property Amount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCHEQUE.AmountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCHEQUE.AmountColumn) = value
            End Set
        End Property
        
        Public Property Excess As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCHEQUE.ExcessColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCHEQUE.ExcessColumn) = value
            End Set
        End Property
        
        Public Function IsBankNull() As Boolean
            Return Me.IsNull(Me.tableCHEQUE.BankColumn)
        End Function
        
        Public Sub SetBankNull()
            Me(Me.tableCHEQUE.BankColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Is_Cheque_No_Null() As Boolean
            Return Me.IsNull(Me.tableCHEQUE._Cheque_No_Column)
        End Function
        
        Public Sub Set_Cheque_No_Null()
            Me(Me.tableCHEQUE._Cheque_No_Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsAmountNull() As Boolean
            Return Me.IsNull(Me.tableCHEQUE.AmountColumn)
        End Function
        
        Public Sub SetAmountNull()
            Me(Me.tableCHEQUE.AmountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsExcessNull() As Boolean
            Return Me.IsNull(Me.tableCHEQUE.ExcessColumn)
        End Function
        
        Public Sub SetExcessNull()
            Me(Me.tableCHEQUE.ExcessColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CHEQUERowChangeEvent
        Inherits EventArgs
        
        Private eventRow As CHEQUERow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As CHEQUERow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As CHEQUERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
