'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class dsReports
    Inherits DataSet
    
    Private tableCtnInfo As CtnInfoDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("CtnInfo")) Is Nothing) Then
                Me.Tables.Add(New CtnInfoDataTable(ds.Tables("CtnInfo")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CtnInfo As CtnInfoDataTable
        Get
            Return Me.tableCtnInfo
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As dsReports = CType(MyBase.Clone,dsReports)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("CtnInfo")) Is Nothing) Then
            Me.Tables.Add(New CtnInfoDataTable(ds.Tables("CtnInfo")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableCtnInfo = CType(Me.Tables("CtnInfo"),CtnInfoDataTable)
        If (Not (Me.tableCtnInfo) Is Nothing) Then
            Me.tableCtnInfo.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "dsReports"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsReports.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableCtnInfo = New CtnInfoDataTable
        Me.Tables.Add(Me.tableCtnInfo)
    End Sub
    
    Private Function ShouldSerializeCtnInfo() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub CtnInfoRowChangeEventHandler(ByVal sender As Object, ByVal e As CtnInfoRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CtnInfoDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCtnNo As DataColumn
        
        Private columnCtnSze As DataColumn
        
        Private columnFullEmpty As DataColumn
        
        Private columnInOut As DataColumn
        
        Private columnCCRGps As DataColumn
        
        Friend Sub New()
            MyBase.New("CtnInfo")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CtnNoColumn As DataColumn
            Get
                Return Me.columnCtnNo
            End Get
        End Property
        
        Friend ReadOnly Property CtnSzeColumn As DataColumn
            Get
                Return Me.columnCtnSze
            End Get
        End Property
        
        Friend ReadOnly Property FullEmptyColumn As DataColumn
            Get
                Return Me.columnFullEmpty
            End Get
        End Property
        
        Friend ReadOnly Property InOutColumn As DataColumn
            Get
                Return Me.columnInOut
            End Get
        End Property
        
        Friend ReadOnly Property CCRGpsColumn As DataColumn
            Get
                Return Me.columnCCRGps
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As CtnInfoRow
            Get
                Return CType(Me.Rows(index),CtnInfoRow)
            End Get
        End Property
        
        Public Event CtnInfoRowChanged As CtnInfoRowChangeEventHandler
        
        Public Event CtnInfoRowChanging As CtnInfoRowChangeEventHandler
        
        Public Event CtnInfoRowDeleted As CtnInfoRowChangeEventHandler
        
        Public Event CtnInfoRowDeleting As CtnInfoRowChangeEventHandler
        
        Public Overloads Sub AddCtnInfoRow(ByVal row As CtnInfoRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCtnInfoRow(ByVal CtnNo As String, ByVal CtnSze As Integer, ByVal FullEmpty As String, ByVal InOut As String, ByVal CCRGps As Long) As CtnInfoRow
            Dim rowCtnInfoRow As CtnInfoRow = CType(Me.NewRow,CtnInfoRow)
            rowCtnInfoRow.ItemArray = New Object() {CtnNo, CtnSze, FullEmpty, InOut, CCRGps}
            Me.Rows.Add(rowCtnInfoRow)
            Return rowCtnInfoRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As CtnInfoDataTable = CType(MyBase.Clone,CtnInfoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New CtnInfoDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCtnNo = Me.Columns("CtnNo")
            Me.columnCtnSze = Me.Columns("CtnSze")
            Me.columnFullEmpty = Me.Columns("FullEmpty")
            Me.columnInOut = Me.Columns("InOut")
            Me.columnCCRGps = Me.Columns("CCRGps")
        End Sub
        
        Private Sub InitClass()
            Me.columnCtnNo = New DataColumn("CtnNo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCtnNo)
            Me.columnCtnSze = New DataColumn("CtnSze", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCtnSze)
            Me.columnFullEmpty = New DataColumn("FullEmpty", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFullEmpty)
            Me.columnInOut = New DataColumn("InOut", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnInOut)
            Me.columnCCRGps = New DataColumn("CCRGps", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCCRGps)
        End Sub
        
        Public Function NewCtnInfoRow() As CtnInfoRow
            Return CType(Me.NewRow,CtnInfoRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New CtnInfoRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CtnInfoRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CtnInfoRowChangedEvent) Is Nothing) Then
                RaiseEvent CtnInfoRowChanged(Me, New CtnInfoRowChangeEvent(CType(e.Row,CtnInfoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CtnInfoRowChangingEvent) Is Nothing) Then
                RaiseEvent CtnInfoRowChanging(Me, New CtnInfoRowChangeEvent(CType(e.Row,CtnInfoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CtnInfoRowDeletedEvent) Is Nothing) Then
                RaiseEvent CtnInfoRowDeleted(Me, New CtnInfoRowChangeEvent(CType(e.Row,CtnInfoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CtnInfoRowDeletingEvent) Is Nothing) Then
                RaiseEvent CtnInfoRowDeleting(Me, New CtnInfoRowChangeEvent(CType(e.Row,CtnInfoRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCtnInfoRow(ByVal row As CtnInfoRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CtnInfoRow
        Inherits DataRow
        
        Private tableCtnInfo As CtnInfoDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCtnInfo = CType(Me.Table,CtnInfoDataTable)
        End Sub
        
        Public Property CtnNo As String
            Get
                Try 
                    Return CType(Me(Me.tableCtnInfo.CtnNoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCtnInfo.CtnNoColumn) = value
            End Set
        End Property
        
        Public Property CtnSze As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCtnInfo.CtnSzeColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCtnInfo.CtnSzeColumn) = value
            End Set
        End Property
        
        Public Property FullEmpty As String
            Get
                Try 
                    Return CType(Me(Me.tableCtnInfo.FullEmptyColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCtnInfo.FullEmptyColumn) = value
            End Set
        End Property
        
        Public Property InOut As String
            Get
                Try 
                    Return CType(Me(Me.tableCtnInfo.InOutColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCtnInfo.InOutColumn) = value
            End Set
        End Property
        
        Public Property CCRGps As Long
            Get
                Try 
                    Return CType(Me(Me.tableCtnInfo.CCRGpsColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCtnInfo.CCRGpsColumn) = value
            End Set
        End Property
        
        Public Function IsCtnNoNull() As Boolean
            Return Me.IsNull(Me.tableCtnInfo.CtnNoColumn)
        End Function
        
        Public Sub SetCtnNoNull()
            Me(Me.tableCtnInfo.CtnNoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCtnSzeNull() As Boolean
            Return Me.IsNull(Me.tableCtnInfo.CtnSzeColumn)
        End Function
        
        Public Sub SetCtnSzeNull()
            Me(Me.tableCtnInfo.CtnSzeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFullEmptyNull() As Boolean
            Return Me.IsNull(Me.tableCtnInfo.FullEmptyColumn)
        End Function
        
        Public Sub SetFullEmptyNull()
            Me(Me.tableCtnInfo.FullEmptyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsInOutNull() As Boolean
            Return Me.IsNull(Me.tableCtnInfo.InOutColumn)
        End Function
        
        Public Sub SetInOutNull()
            Me(Me.tableCtnInfo.InOutColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCCRGpsNull() As Boolean
            Return Me.IsNull(Me.tableCtnInfo.CCRGpsColumn)
        End Function
        
        Public Sub SetCCRGpsNull()
            Me(Me.tableCtnInfo.CCRGpsColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CtnInfoRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As CtnInfoRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As CtnInfoRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As CtnInfoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
